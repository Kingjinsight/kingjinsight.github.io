<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech_Weekly on King&#39;s Blog</title>
    <link>http://localhost:1313/tags/tech_weekly/</link>
    <description>Recent content in Tech_Weekly on King&#39;s Blog</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tech_weekly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>| King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek5/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek5/</guid>
      <description>&lt;h2 id=&#34;trivias&#34;&gt;Trivias:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Generating functions are a powerful mathematical tool that transform discrete sequences into algebraic functions, enabling us to solve complex combinatorial counting problems through function operations.&lt;/li&gt;
&lt;li&gt;GPOS vs RTOS
&lt;ol&gt;
&lt;li&gt;General purpose operating systems like Windows, macOS, and Linux are designed to provide a versatile, user-friendly computing environment. They prioritize overall system efficiency, with more flexible restrictions on task response times.&lt;/li&gt;
&lt;li&gt;Real time operating systems such as VxWorks, focus on strict time limitations for individual tasks, ensuring predictable and deterministic responses. These systems are typically used in environments demanding high reliability and precise time control, featuring a smaller, more streamlined kernel that guarantees real-time performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      <content:encoded><![CDATA[<h2 id="trivias">Trivias:</h2>
<ol>
<li>Generating functions are a powerful mathematical tool that transform discrete sequences into algebraic functions, enabling us to solve complex combinatorial counting problems through function operations.</li>
<li>GPOS vs RTOS
<ol>
<li>General purpose operating systems like Windows, macOS, and Linux are designed to provide a versatile, user-friendly computing environment. They prioritize overall system efficiency, with more flexible restrictions on task response times.</li>
<li>Real time operating systems such as VxWorks, focus on strict time limitations for individual tasks, ensuring predictable and deterministic responses. These systems are typically used in environments demanding high reliability and precise time control, featuring a smaller, more streamlined kernel that guarantees real-time performance.</li>
</ol>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>A Dive into the Bitcoin Technology | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek4/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek4/</guid>
      <description>&lt;h2 id=&#34;bitcoin&#34;&gt;Bitcoin&lt;/h2&gt;
&lt;p&gt;The legend of Bitcoin has shown its magic for a long time. Recently, I have started to explore this field, and this is a record of my learning.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-blockchain&#34;&gt;The Blockchain‚õìÔ∏è&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;blockchain&lt;/strong&gt; is the foundational technology of Bitcoin. Think of it as a public, digital ledger or receipt book that is shared across thousands of computers worldwide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s a Chain of Blocks:&lt;/strong&gt; Each &amp;ldquo;block&amp;rdquo; contains a list of recent transactions. When a new block is created, it is cryptographically linked to the previous one, forming an unbroken chain leading all the way back to the very first block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s Immutable:&lt;/strong&gt; Because each block is linked to the one before it, changing a transaction in an old block would require re-doing all the work for every single block that came after it. This makes the ledger permanent and tamper-proof. This structure is what proves each coin&amp;rsquo;s history and prevents fraud like double-spending.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-genesis-block&#34;&gt;The Genesis Blocküìú&lt;/h4&gt;
&lt;p&gt;The very first block, known as the &lt;strong&gt;Genesis Block&lt;/strong&gt;, was mined on &lt;strong&gt;2009.01.04&lt;/strong&gt;, by Bitcoin&amp;rsquo;s mysterious creator, &lt;strong&gt;Satoshi Nakamoto&lt;/strong&gt;. This single block was the start of the entire Bitcoin network. Once it was created, the race to mine the second block began, and the chain has been growing continuously ever since.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="bitcoin">Bitcoin</h2>
<p>The legend of Bitcoin has shown its magic for a long time. Recently, I have started to explore this field, and this is a record of my learning.</p>
<hr>
<h4 id="the-blockchain">The Blockchain‚õìÔ∏è</h4>
<p>The <strong>blockchain</strong> is the foundational technology of Bitcoin. Think of it as a public, digital ledger or receipt book that is shared across thousands of computers worldwide.</p>
<ul>
<li><strong>It&rsquo;s a Chain of Blocks:</strong> Each &ldquo;block&rdquo; contains a list of recent transactions. When a new block is created, it is cryptographically linked to the previous one, forming an unbroken chain leading all the way back to the very first block.</li>
<li><strong>It&rsquo;s Immutable:</strong> Because each block is linked to the one before it, changing a transaction in an old block would require re-doing all the work for every single block that came after it. This makes the ledger permanent and tamper-proof. This structure is what proves each coin&rsquo;s history and prevents fraud like double-spending.</li>
</ul>
<hr>
<h4 id="the-genesis-block">The Genesis Blocküìú</h4>
<p>The very first block, known as the <strong>Genesis Block</strong>, was mined on <strong>2009.01.04</strong>, by Bitcoin&rsquo;s mysterious creator, <strong>Satoshi Nakamoto</strong>. This single block was the start of the entire Bitcoin network. Once it was created, the race to mine the second block began, and the chain has been growing continuously ever since.</p>
<hr>
<h4 id="mining">Mining‚õèÔ∏è</h4>
<p>Mining is the process of creating new blocks. It&rsquo;s a competitive race that serves two critical purposes:</p>
<ol>
<li><strong>Validating Transactions:</strong> Miners group pending transactions into a new block.</li>
<li><strong>Creating New Bitcoin:</strong> The winner of the race is rewarded with new bitcoin.</li>
</ol>
<p>Here‚Äôs how a miner wins the race and proves their block is valid:</p>
<ul>
<li><strong>The Hashing Puzzle:</strong> Miners take the data in their block and use their computers to find a specific number called a <strong>nonce</strong>. When the block data and the nonce are combined and put through a cryptographic function (SHA-256), they produce a unique digital fingerprint called a <strong>hash</strong>.</li>
<li><strong>The &ldquo;Lower Than&rdquo; Rule:</strong> To win, a miner must find a hash that is <strong>lower than the current network &ldquo;target&rdquo;</strong>. This target is a very large number that the entire network agrees on. Finding a hash below this target is incredibly difficult and requires immense computational power‚Äîit&rsquo;s like trying to win a global lottery every 10 minutes.</li>
<li><strong>The Reward and The Halving:</strong> The first miner to find a valid hash wins the <strong>block reward</strong>.
<ul>
<li>Initially, the reward was <strong>50 BTC</strong>.</li>
<li>However, this reward is programmed to cut in half roughly every four years (or 210,000 blocks) in an event called the <strong>halving</strong>.</li>
<li>As of the April 2024 halving, the reward is now <strong>3.125 BTC</strong>.</li>
<li>This mechanism controls the supply of new bitcoin, making the currency scarce and ensuring its total amount will never exceed <strong>21 million coins</strong>.</li>
</ul>
</li>
</ul>
<p>When a winning block is found, its hash is broadcast across the P2P network. All other participants quickly verify that the hash is valid. Once confirmed, they add the new block to their copy of the blockchain and immediately start competing to solve the <em>next</em> block.</p>
<hr>
<h4 id="how-to-mine">How to Mine:</h4>
<p>There are a few ways to participate in Bitcoin mining, each with its own pros and cons.</p>
<ul>
<li><strong>Solo Mining:</strong> This is you, on your own, trying to solve a block. If you succeed, you get the <em>entire</em> block reward (3.125 BTC + transaction fees). However, the odds of a single person solving a block today are astronomically low due to the immense competition. It&rsquo;s like buying a single lottery ticket and hoping to win the grand prize.</li>
<li><strong>Mining Pool:</strong> This is the most common method. You join a &ldquo;pool&rdquo; with thousands of other miners, combining your computing power. The pool works together to find blocks much more frequently. When the pool wins, the reward is split among all participants based on how much computing power they contributed. This provides smaller, but much more consistent and predictable, payouts.</li>
</ul>
<hr>
<h4 id="block-forks">Block Forksüç¥</h4>
<p>A <strong>fork</strong> happens when the blockchain temporarily or permanently splits into two different paths.</p>
<ul>
<li><strong>Accidental Fork:</strong> Sometimes, two miners find a valid block at almost the exact same time. The network briefly splits as some nodes follow one miner and some follow the other. This is usually resolved within a few minutes when the next block is found and added to one of the chains, making it the &ldquo;longest&rdquo; and therefore the official one. The shorter chain is then abandoned.</li>
<li><strong>Hard Fork:</strong> This is an intentional split that happens when the network&rsquo;s software rules are changed in a way that is not backward-compatible. All participants must upgrade to the new rules to continue. If a significant portion of the community refuses to upgrade, the split becomes permanent, resulting in the creation of a new, separate cryptocurrency (e.g., Bitcoin Cash was created from a hard fork of Bitcoin).</li>
</ul>
<hr>
<h4 id="ethics">Ethics</h4>
<p>Mining bitcoin always consume immense energy, which critics view as a wasteful environmental cost for a seemingly meaningless computation. Proponents argue this mechanism decentralized financial system that offers freedom from the control of banks and governments.</p>
<h4 id="tools">Tools</h4>
<p>Calculate computing performance: <a href="https://www.nicehash.com/profitability-calculator">https://www.nicehash.com/profitability-calculator</a></p>
<blockquote>
<p>This is the computating power of my personal game laptop(one dollar per day hhh)
<img loading="lazy" src="/Interesting_thing/computating_power.png"></p></blockquote>
<h4 id="resources">Resources:</h4>
<p>Youtube channels</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=5hgdekVZb3A&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=3">https://www.youtube.com/watch?v=5hgdekVZb3A&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=3</a></li>
<li><a href="https://www.youtube.com/watch?v=a41DMDfJjsU&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=2">https://www.youtube.com/watch?v=a41DMDfJjsU&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=2</a></li>
<li><a href="https://Gemini.google.com">https://Gemini.google.com</a></li>
</ul>
<h2 id="trivias">Trivias</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Charles_Scott_Sherrington">Sherrington</a>, coined the word &ldquo;synapse&rdquo; to define the connection between two neurons</li>
<li>Two different roads of AI: connectionism and Symbolism.</li>
<li>Hidden layer was firstly been implemented in Boltzmann machine, although Rosenblatt had some idea about multilayer perceptrons, but he didn&rsquo;t find any useful training algorithm.</li>
<li>Restricted Boltzmann machine - each layer is only allowed to be fully connectted to the next layer, current layer nodes are not connectted to each other. The advantages of this machine is it allows to update bodes within the same layer in parallel</li>
<li>The invention of hidden layer allows model to understand abstract features. It also becomes to one of the most significant component in deep learning.</li>
<li>The main difference between the Hopfield Network and the Boltzmann nachine is the presence of hidden layers. Other differences include the fact that the Hopfield network is deterministic, whereas the Boltzmann machine is stochastic, and the defintions of their energy function also differ.</li>
<li>The fovea has many photoreceptors, with a high density of cones(for colors) and nearly no rods(for dark). This structure allows us to see the world clearly. If you develop myopia, the image formed after light is reflected by the eye may not be focused directly on the fovea.</li>
<li>The idea of CNN was mainly inspired by the HMAX model(hierarchical, pooling, convolution), and the HMAX model was proposed by Tomaso Poggio, to simulate primate visual system, specifically ventral stream.</li>
<li>Pytorch for research area, Tensorflow for industry and JAX for high level usage.</li>
<li>Ethereum and ether is not the same as bitcoin. Ethereum has a longer vision, and the number of ether is unlimited.</li>
</ol>
<h2 id="resource">Resource</h2>
<ol>
<li>Documentary of AlphaGo: <a href="https://www.youtube.com/watch?v=WXuK6gekU1Y">https://www.youtube.com/watch?v=WXuK6gekU1Y</a></li>
<li>How to use hugging face: <a href="https://www.youtube.com/watch?v=3kRB2TXewus">https://www.youtube.com/watch?v=3kRB2TXewus</a></li>
<li>This is the most comprehensive guide for AI beginner I had ever seen: <a href="https://www.reddit.com/r/DTU__Delhi/comments/1g0luec/mastering_aiml_in_2024_the_only_resource_guide/">Guide link</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>For UNIX Week | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek3/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek3/</guid>
      <description>&lt;h2 id=&#34;book---unix-a-history-and-a-memoir&#34;&gt;Book - Unix: A History and a Memoir&lt;/h2&gt;
&lt;p&gt;Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &amp;ldquo;why&amp;rdquo; questions I had when I learning linux system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AT&amp;amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.&lt;/li&gt;
&lt;li&gt;The system developed before Unix was called Multics.&lt;/li&gt;
&lt;li&gt;Since ‚ÄúMultics‚Äù already used ‚Äúmulti,‚Äù the early name of Unix was ‚ÄúUnics.‚Äù&lt;/li&gt;
&lt;li&gt;Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn‚Äôt written for the PDP-10.&lt;/li&gt;
&lt;li&gt;Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.&lt;/li&gt;
&lt;li&gt;Unix eventually declined due to copyright issues. AT&amp;amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.&lt;/li&gt;
&lt;li&gt;GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.&lt;/li&gt;
&lt;li&gt;MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.&lt;/li&gt;
&lt;li&gt;In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.&lt;/li&gt;
&lt;li&gt;MINIX was widely used because it was embedded in Intel chips.&lt;/li&gt;
&lt;li&gt;The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.&lt;/li&gt;
&lt;li&gt;Microsoft once had its 3own Unix-like system.&lt;/li&gt;
&lt;li&gt;Another completely different path from Unix was MS-DOS, which eventually evolved into today‚Äôs Windows.&lt;/li&gt;
&lt;li&gt;You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.&lt;/li&gt;
&lt;li&gt;‚ÄúEverything is a file‚Äù is one of the core principles of Unix.&lt;/li&gt;
&lt;li&gt;The KISS principle (‚ÄúKeep It Simple, Stupid‚Äù) is a fundamental part of Unix philosophy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The UNIX philosophy is very similar to some programming concepts I&amp;rsquo;ve recently learned at university. That&amp;rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="book---unix-a-history-and-a-memoir">Book - Unix: A History and a Memoir</h2>
<p>Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &ldquo;why&rdquo; questions I had when I learning linux system.</p>
<ol>
<li>AT&amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.</li>
<li>The system developed before Unix was called Multics.</li>
<li>Since ‚ÄúMultics‚Äù already used ‚Äúmulti,‚Äù the early name of Unix was ‚ÄúUnics.‚Äù</li>
<li>Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn‚Äôt written for the PDP-10.</li>
<li>Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.</li>
<li>Unix eventually declined due to copyright issues. AT&amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.</li>
<li>GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.</li>
<li>MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.</li>
<li>In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.</li>
<li>MINIX was widely used because it was embedded in Intel chips.</li>
<li>The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.</li>
<li>Microsoft once had its 3own Unix-like system.</li>
<li>Another completely different path from Unix was MS-DOS, which eventually evolved into today‚Äôs Windows.</li>
<li>You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.</li>
<li>‚ÄúEverything is a file‚Äù is one of the core principles of Unix.</li>
<li>The KISS principle (‚ÄúKeep It Simple, Stupid‚Äù) is a fundamental part of Unix philosophy.</li>
</ol>
<p>The UNIX philosophy is very similar to some programming concepts I&rsquo;ve recently learned at university. That&rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.</p>
<ol>
<li>Keep it simple stupid</li>
<li>Do one thing, and do it well</li>
<li>Everything is a file</li>
<li>Make each program a filter</li>
<li>Fail loudly</li>
<li>Modularity</li>
<li>Prototyping early</li>
</ol>
<p>In today, many barriers had already been removed.<br>
And I realise.<br>
The revolution of AI is just like the reenactment of Unix&rsquo;s development.<br>
So.<br>
KISS.</p>
<h2 id="trivias">Trivias</h2>
<ol>
<li>tty - TeleTYpewriter, terminal in the old time, before lcd screen been invented.<img src="/TechStuff/Teletype_model_33.jpg" alt="teletype model 33" width="500" height="600"></li>
<li>UNIX was developed on the PDP-7, a computer with no screen, no mouse and only 8KB of RAM. It weighted nearly 500kg. <img alt="pdp7" loading="lazy" src="/TechStuff/Pdp7.jpeg"></li>
<li>UNIX and UNIX-like system use abbreviated commands because typing on TTY terminals in the 1960s was slow and insufficient.</li>
<li>Second-system effect: It believes that after completing a small, elegant, and successful system, people tend to have overly high expectations for the next projects, which may lead to the creation of a huge, feature-rich but monstrous system.The &ldquo;second-system effect&rdquo; can result in software project plans being overdesigned, with too many variables and excessive complexity, ultimately falling short of expectations and leading to failure. such as PL/I in Multics</li>
<li>Fortran(formular translation): The purpose of this lagnauge is to proceed mathematics formular and float number in an efficient way, like integration, linear algebra. That&rsquo;s why fortran is still popular in some supercomputer and scientific calculation.</li>
<li>B lagnauge is designed in a bit-unit computer PCP-7, where C langauge is designed in a byte-unit computer. Therefore the main difference between B and C is B langauge doesn&rsquo;t support types and C does.</li>
<li>Development of Clang: PL/I -&gt; BCPL -&gt; B -&gt; New B(C)</li>
<li>If computers using the same cpu architecture, they will using the same assembly language.<img alt="assembly_langauge_with_architecture" loading="lazy" src="/TechStuff/assembly_langauge_diff.png"></li>
<li>The grep command is used to find lines that match a specific pattern in a file while the sed command is used to insert, replace and delete text from a file. Finally, the awk command supports programming logic and is often used for advanced data processing tasks.</li>
<li>The development of UNIX from 1970 until now. <img alt="road of unix" loading="lazy" src="/TechStuff/roadOfUNIX.png"></li>
</ol>
<h2 id="talks">Talks</h2>
<ol>
<li>&ldquo;A new technological discovery is often discredited by older generations of professionals - especially those with high authority and prestige in the existing field - in order to protect their own status&rdquo;</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Jarvis Will Coming Soon | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek2/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek2/</guid>
      <description>&lt;h2 id=&#34;model-context-protocol-overview&#34;&gt;Model Context Protocol overview&lt;/h2&gt;
&lt;p&gt;MCP (Model Context Protocol) can be understood as a &amp;ldquo;universal language&amp;rdquo; for communication between AI and external tools. It&amp;rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.&lt;/p&gt;
&lt;h4 id=&#34;why-is-mcp-needed&#34;&gt;Why is MCP needed?&lt;/h4&gt;
&lt;p&gt;In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications √ó M tools = N√óM interfaces).&lt;br&gt;
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
&lt;img alt=&#34;components mcp include&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/TechStuff/mcp.png&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="model-context-protocol-overview">Model Context Protocol overview</h2>
<p>MCP (Model Context Protocol) can be understood as a &ldquo;universal language&rdquo; for communication between AI and external tools. It&rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.</p>
<h4 id="why-is-mcp-needed">Why is MCP needed?</h4>
<p>In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications √ó M tools = N√óM interfaces).<br>
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp.png"></p>
<p>The current components of MCP servers include:
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp_include.png"></p>
<h4 id="how-does-mcp-work">How does MCP work?</h4>
<p><img alt="how mcp work" loading="lazy" src="/TechStuff/mcp_work.png"></p>
<h4 id="example">Example:</h4>
<p>Suppose you&rsquo;re using an AI assistant to manage your work, and it wants to help you schedule today&rsquo;s meeting:</p>
<ul>
<li>
<p>Without MCP, developers would need to write separate integration code for Outlook, Google Calendar, and Apple Calendar.</p>
</li>
<li>
<p>With MCP, the AI only needs to call the MCP server, which will automatically interface with your calendar system. No matter which calendar service you use, the AI can work seamlessly.</p>
</li>
</ul>
<h4 id="core-functions-of-mcp">Core Functions of MCP:</h4>
<ul>
<li>
<p>Reducing development costs (no need to develop separate integrations for each tool).</p>
</li>
<li>
<p>Enhancing AI&rsquo;s ability to access external data (allowing AI to easily query and manipulate external data).</p>
</li>
<li>
<p>Standardizing communication (making communication between different AI applications and tools smoother).</p>
</li>
</ul>
<p>You can think of MCP as the &ldquo;USB interface for AI&rdquo;‚Äîany AI device can plug into different tools without needing to individually adapt to each one!</p>
<hr>
<h2 id="trivias">Trivias:</h2>
<ol>
<li><code>Graph</code> is a great data structure, it can be used to find the shortest path, solve a magic cube.
Rely on this data structure, Human find the shortest steps to solve the worst case configured
<code>3\*3\*3</code> magic cube in <strong>20</strong> steps (which also called god&rsquo;s number) and 11 steps for <code>2\*2\*2</code> one. What about n*n*n, Here is an interesing paper
about time compleixity of solving a n*n*n magic cube: <a href="/Demaine_Algoritms_for_solving.pdf">Algorithms for Solving Rubik‚Äôs Cubes</a></li>
<li>Topological sort is an algorithm based on DFS and DAG, It&rsquo;s not a traditional sorting algorithm, like comparing the size of each number and sort them, but sorting based on dependencies.</li>
<li>Dynamic programming is just like recursion + memorization + guessing</li>
<li>P vs NP problems: P is a problem  that can be solved easily by a computer, NP is a problem that you can check for correctness very easily once solved. However, P != NP for example wec can&rsquo;t engineer luck.
Also, NP hard means it is at least as hard as any problem in NP, and NP-complete is lke if you can solve one NP-complete question, you can solve all NP question.
Reduction is like to prove a known NP-complete question, and transfer it into a NP question X, then X is also a NP-complete question</li>
<li>HTTP vs REST API
<ul>
<li>
<p>HTTP is a protocol, and its core task is to define how to request and transfer data between your broswer and server</p>
<ul>
<li>It focuses on the data exchange level, regardless of whether the data is an image, text, video, or API response.</li>
<li>For example, you can use an HTTP request to access a webpage (HTML page) or use an HTTP request to retrieve API data (JSON data). It doesn‚Äôt care about what data you&rsquo;re transmitting.</li>
</ul>
</li>
<li>
<p>REST API is a design style, based on the HTTP protocol, with rules and best practices:</p>
<ul>
<li>It views content on the server as &ldquo;resources&rdquo; and specifies how to operate on them using HTTP methods (GET, POST, PUT, DELETE).</li>
<li>REST API design considers resource orientation: Resources (like users, articles, comments, etc.) have unique identifiers (URIs), and clients interact with these resources through HTTP requests.</li>
</ul>
<p>For example, in a REST API, you can:</p>
<ul>
<li>GET request: Retrieve a resource (e.g., get movie information).</li>
<li>POST request: Create a new resource (e.g., submit a new comment).</li>
<li>PUT request: Update a resource (e.g., modify user information).</li>
<li>DELETE request: Delete a resource (e.g., remove an article).</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="resource">Resource:</h2>
<ol>
<li>A tool to build a personal streaming music player: <a href="https://www.navidrome.org/">navidrome</a></li>
<li>A great blog that introduce human visualization: <a href="https://www-sciencedirect-com.eux.idm.oclc.org/science/article/pii/B9780128038130000040#f0015">human visualization</a></li>
<li>Five basic algorithms explanation:
<ul>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp">Dynamic programming</a></li>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">Greedy Algorithm</a></li>
<li><a href="https://www.bilibili.com/video/BV1wi4y157er?spm_id_from=333.788.videopod.sections&amp;vd_source=783331b1d88fa190b5ce8305307e0af5">Backtracking</a></li>
<li><a href="https://chatgpt.com/share/67d76084-79f0-8006-8a37-4500841a7b9a">Branch and Bounding</a></li>
</ul>
</li>
<li>This week, Nvidia GTC 2025 brings a lot of new tech, PC in AI age, B300, new architecture, robots.
After watched the coverage keynotes, I was just feel like our mankind is in an special stage with unpredictable pace. In science fiction films, at this point
, it often leads to the arrival of an alien civilization.
<img alt="GTC_2025" loading="lazy" src="https://cdn.mos.cms.futurecdn.net/QQ6ZABoJtLbUEnGLXxz2GT-970-80.png.webp"></li>
<li>A dijkstra algorithm visualiser that helps me understand it: <a href="https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">Dijkstra shortest path</a></li>
<li>MCP explain: <a href="https://www.philschmid.de/mcp-introduction">A blog that explain MCP crystal clear</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Start | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek1/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek1/</guid>
      <description>&lt;h2 id=&#34;email-sending-and-receiving-system&#34;&gt;Email sending and receiving system&lt;/h2&gt;
&lt;p&gt;The main system is build based on three protocols: SMTP, POP3 and IMAP.
&lt;img alt=&#34;process of email system&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/emailsys.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;SMTP is used for sending emails to the recipient‚Äôs email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&amp;rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&amp;rsquo;s email server using SMTP as well.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="email-sending-and-receiving-system">Email sending and receiving system</h2>
<p>The main system is build based on three protocols: SMTP, POP3 and IMAP.
<img alt="process of email system" loading="lazy" src="/emailsys.png"></p>
<p>SMTP is used for sending emails to the recipient‚Äôs email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&rsquo;s email server using SMTP as well.</p>
<p>POP3 downloads emails from the email server to the email client. By default, it removes emails from the server after downloading, but some email clients allow users to keep copies on the server.
IMAP keeps emails on the server and synchronizes them across multiple devices. The email client initially loads only the headers, and the full email content is fetched from the server when the user opens it.</p>
<p>If you want to customize an email domain. You need to have your own SMTP and IMAP/POP3 server and a domain, the other steps are the same as above.</p>
<hr>
<h2 id="pkgbuild-in-arch-linux">PKGBUILD in Arch Linux</h2>
<p>PKGBUILD is a bash script contain the build information required by archlinux package
we use makepkg script to build the package, it will search PKGBUILD first in the current folder.
<img alt="PKGBUILD process" loading="lazy" src="/Hand_write_note/pkgbuild.jpg">
Benefits:</p>
<ul>
<li>using pacman to manage, user can update and uninstall easily</li>
<li>some pkgbuild file include the commands to generate a binary file and store it in /user/bin</li>
</ul>
<p>Drawbacks:</p>
<ul>
<li>Not friendly to starter</li>
</ul>
<p>Although we can use yay to help us do all these stuff.</p>
<hr>
<h2 id="trivias">Trivias</h2>
<ol>
<li>Newton&rsquo;s method is quadratic convergence when we want to calculate the root of a number</li>
<li>Catalan number is a group of sequence that appear widely in combinatorics. e.g. ways to arrange n brackets, number of triangles in an n+2 convex polygon. The common property of these applications is that they are recursive and have a constrained structure.</li>
<li>Toom cook: It divide a d-digit number into n parts and doing arithmatic calculations.</li>
<li>Schonhage-strassen scheme: It multiplies two integers of length ùëõ in O (ùëõ logùëõ log logùëõ) steps on a multitape Turing machine</li>
<li>A Naive algorithm is usually the most obvious solution when one is asked a problem. It may not be a smart algorithm but will probably get the job done</li>
<li>The taste of red wine is determined by acidity, sweetness, alcohol content, tannins, and body. Wines are categorized into New World and Old World. New World wines (from countries like the USA, Chile, Argentina, and China) are named after the grape variety, while Old World wines (mainly from Europe) are named after their place of origin.<br>
Red wine is made by fermenting red grapes with their skins. White wine is made from either white grapes or red grapes without their skins. Ros√© wine is made by soaking the grape skins briefly but fermenting without them. Sparkling wine undergoes a second fermentation to produce bubbles.</li>
<li>Gabriel&rsquo;s horn is a type of geometric figure that has infinite surface area but finite volume.</li>
</ol>
<hr>
<h2 id="resources">Resources</h2>
<ol>
<li>Code question(leetcode), system design question(crack the code interview), teamwork, communication are all important in the interview.</li>
<li>An old guideline to learn ai: <a href="https://www.captainai.net/itcoke/">https://www.captainai.net/itcoke/</a></li>
<li>A guideline to learn CS: <a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">https://csdiy.wiki/ÂêéËÆ∞/</a></li>
<li>Useful tips to integrate by parts, ÂèçÂØπÂπÇÊåá‰∏â, to choose u.</li>
<li>Customize your zsh: <a href="https://ohmyz.sh">oh my zsh</a></li>
<li>Xiaomi releases a concept modular camera, it looks pretty awesome and innovative.
<img loading="lazy" src="/Interesting_thing/Xiaomi_modular_camera.png"></li>
<li>3b1b&rsquo;s taylor series explaination:https://www.youtube.com/watch?v=3d6DsjIBzJ4</li>
<li>3b1b&rsquo;s explaination of why we have exponential e:https://www.youtube.com/watch?v=m2MIpDrF7Es</li>
<li>This website is all about competitive writing of source code that is as short as possible: <a href="https://codegolf.stackexchange.com/">Codewolf</a></li>
<li>Explaination of greedy algorithm: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">greedy algorithm</a></li>
<li>Explaination of dynamic programming: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp#%E9%A2%98%E7%9B%AE">dynamic programming</a></li>
<li>Deploy perosonal VPN tools: <a href="https://tailscale.com/">tailscale</a></li>
</ol>
<h2 id="abstract">Abstract</h2>
<p>If no one is reading blogs anymore, why should we write them?
Let‚Äôs make it simple: you write a blog, but nobody cares, nobody reads it.
At least, the number of readers is not as many as you thought.
You put your personal ideas and thoughts into the article, carefully structuring each sentence, and choose a great image‚Äîthen, no response, no likes, no shares, no activity.
So, what is the meaning of writing a blog?
First, there are two misconceptions about blogging.
One is that if I write a good article, readers will come naturally.
No, they won‚Äôt come. There are billions of blogs on the internet, like a massive hurricane, and yours is just a single leaf in the wind. Who would notice?
Another misconception is that if nobody reads it, writing is a waste of time.
Blogs have their own hidden value.
You write blogs not for the applause of others, but for your own needs.
Blogs help clear your mind. They help you organize your thoughts and sharpen your perspective.
When you think better, you will achieve better results.
The target audience of a blog is actually not the people on the internet, but your future self. Your article will help you see the evolution of your own thoughts.
Additionally, one day in the future, someone who truly needs your article will find it.
A deep, thoughtful article has a longer-lasting impact than a viral article.
Writing a blog is quite like street photography. You take your camera and walk through the city.
You see a scene‚Äîa moment filled with light, shadow, and humanity‚Äîand then you capture it.
Nobody cares about what you actually captured. But that‚Äôs not the reason you photograph; you photograph because you see something interesting.
Writing a blog is the same. You write a blog because you are thinking, observing new things, and hope to store them somewhere.
If someone reads it, that&rsquo;s great. If not, you‚Äôve still completed your work</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
