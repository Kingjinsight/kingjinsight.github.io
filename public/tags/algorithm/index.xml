<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on Kingjin.io</title>
    <link>http://localhost:1313/tags/algorithm/</link>
    <description>Recent content in Algorithm on Kingjin.io</description>
    <generator>Hugo -- 0.150.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hopfield Network</title>
      <link>http://localhost:1313/posts/hopfieldnetwork/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hopfieldnetwork/</guid>
      <description>&lt;p&gt;2024 Nobel Physics prize was earned by Professor John Hopfield and Professor Geoffrey Hinton, to thanks their distribution on machine learning.
However, I felt very suprised that why it gives to machine learning? Anyway, I hadn&amp;rsquo;t deeply find the answer in that time.&lt;/p&gt;
&lt;p&gt;Recently, Professor Geoffrey Hinton gived us a short lecture about Boltzmann machine virtually.
And before the lecture, I learned Hopfield Network(the predecessor of Boltzimann machine) at my accommodation.
So today I will record this moment.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>2024 Nobel Physics prize was earned by Professor John Hopfield and Professor Geoffrey Hinton, to thanks their distribution on machine learning.
However, I felt very suprised that why it gives to machine learning? Anyway, I hadn&rsquo;t deeply find the answer in that time.</p>
<p>Recently, Professor Geoffrey Hinton gived us a short lecture about Boltzmann machine virtually.
And before the lecture, I learned Hopfield Network(the predecessor of Boltzimann machine) at my accommodation.
So today I will record this moment.</p>
<p>Hopfield Network was invented at 1982. Processor John Hopfield designed it based on ideas from statistical mechanics.</p>
<p><img alt="metaphor" loading="lazy" src="/Hand_write_note/hopfield_network_metaphor.png">
The graph above shows two states of a ball
From the left part, we can see the energy system of the ball is at the highest, which means the ball is very unstable
From the right part, we can see the ball had already fall into the bottom, which means the ball is very stable.
Although it is a classical physics model, but it definitly explain the main idea of hopfield network.</p>
<p>So now we can say hopfield network is just make a system move from an unstable state to stable state.</p>
<p>If you interested how exactly hopfield network work. See the video below, it&rsquo;s pretty nice.</p>
<iframe width=100% height=475 
src="https://www.youtube.com/embed/1WPJdAW-sFo?start=505" 
title="YouTube video player" 
frameborder="0" 
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
allowfullscreen>
</iframe>
<p>This idea is also useful in today.
In LLM, we can say the user&rsquo;s prompt and question is the most unstable states while the answer is the stable state.</p>
<p>Based on the concept of Hopfield networks, many different architectures had been invented, which makes Connectionism and Deep Learning great again.</p>
<p>After all, I catch the reason why nobel prize gives to physics.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Start | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek1/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek1/</guid>
      <description>&lt;h2 id=&#34;email-sending-and-receiving-system&#34;&gt;Email sending and receiving system&lt;/h2&gt;
&lt;p&gt;The main system is build based on three protocols: SMTP, POP3 and IMAP.
&lt;img alt=&#34;process of email system&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/emailsys.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;SMTP is used for sending emails to the recipient‚Äôs email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&amp;rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&amp;rsquo;s email server using SMTP as well.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="email-sending-and-receiving-system">Email sending and receiving system</h2>
<p>The main system is build based on three protocols: SMTP, POP3 and IMAP.
<img alt="process of email system" loading="lazy" src="/emailsys.png"></p>
<p>SMTP is used for sending emails to the recipient‚Äôs email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&rsquo;s email server using SMTP as well.</p>
<p>POP3 downloads emails from the email server to the email client. By default, it removes emails from the server after downloading, but some email clients allow users to keep copies on the server.
IMAP keeps emails on the server and synchronizes them across multiple devices. The email client initially loads only the headers, and the full email content is fetched from the server when the user opens it.</p>
<p>If you want to customize an email domain. You need to have your own SMTP and IMAP/POP3 server and a domain, the other steps are the same as above.</p>
<hr>
<h2 id="pkgbuild-in-arch-linux">PKGBUILD in Arch Linux</h2>
<p>PKGBUILD is a bash script contain the build information required by archlinux package
we use makepkg script to build the package, it will search PKGBUILD first in the current folder.
<img alt="PKGBUILD process" loading="lazy" src="/Hand_write_note/pkgbuild.jpg">
Benefits:</p>
<ul>
<li>using pacman to manage, user can update and uninstall easily</li>
<li>some pkgbuild file include the commands to generate a binary file and store it in /user/bin</li>
</ul>
<p>Drawbacks:</p>
<ul>
<li>Not friendly to starter</li>
</ul>
<p>Although we can use yay to help us do all these stuff.</p>
<hr>
<h2 id="trivias">Trivias</h2>
<ol>
<li>Newton&rsquo;s method is quadratic convergence when we want to calculate the root of a number</li>
<li>Catalan number is a group of sequence that appear widely in combinatorics. e.g. ways to arrange n brackets, number of triangles in an n+2 convex polygon. The common property of these applications is that they are recursive and have a constrained structure.</li>
<li>Toom cook: It divide a d-digit number into n parts and doing arithmatic calculations.</li>
<li>Schonhage-strassen scheme: It multiplies two integers of length ùëõ in O (ùëõ logùëõ log logùëõ) steps on a multitape Turing machine</li>
<li>A Naive algorithm is usually the most obvious solution when one is asked a problem. It may not be a smart algorithm but will probably get the job done</li>
<li>The taste of red wine is determined by acidity, sweetness, alcohol content, tannins, and body. Wines are categorized into New World and Old World. New World wines (from countries like the USA, Chile, Argentina, and China) are named after the grape variety, while Old World wines (mainly from Europe) are named after their place of origin.<br>
Red wine is made by fermenting red grapes with their skins. White wine is made from either white grapes or red grapes without their skins. Ros√© wine is made by soaking the grape skins briefly but fermenting without them. Sparkling wine undergoes a second fermentation to produce bubbles.</li>
<li>Gabriel&rsquo;s horn is a type of geometric figure that has infinite surface area but finite volume.</li>
</ol>
<hr>
<h2 id="resources">Resources</h2>
<ol>
<li>Code question(leetcode), system design question(crack the code interview), teamwork, communication are all important in the interview.</li>
<li>An old guideline to learn ai: <a href="https://www.captainai.net/itcoke/">https://www.captainai.net/itcoke/</a></li>
<li>A guideline to learn CS: <a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">https://csdiy.wiki/ÂêéËÆ∞/</a></li>
<li>Useful tips to integrate by parts, ÂèçÂØπÂπÇÊåá‰∏â, to choose u.</li>
<li>Customize your zsh: <a href="https://ohmyz.sh">oh my zsh</a></li>
<li>Xiaomi releases a concept modular camera, it looks pretty awesome and innovative.
<img loading="lazy" src="/Interesting_thing/Xiaomi_modular_camera.png"></li>
<li>3b1b&rsquo;s taylor series explaination:https://www.youtube.com/watch?v=3d6DsjIBzJ4</li>
<li>3b1b&rsquo;s explaination of why we have exponential e:https://www.youtube.com/watch?v=m2MIpDrF7Es</li>
<li>This website is all about competitive writing of source code that is as short as possible: <a href="https://codegolf.stackexchange.com/">Codewolf</a></li>
<li>Explaination of greedy algorithm: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">greedy algorithm</a></li>
<li>Explaination of dynamic programming: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp#%E9%A2%98%E7%9B%AE">dynamic programming</a></li>
<li>Deploy perosonal VPN tools: <a href="https://tailscale.com/">tailscale</a></li>
</ol>
<h2 id="abstract">Abstract</h2>
<p>If no one is reading blogs anymore, why should we write them?
Let‚Äôs make it simple: you write a blog, but nobody cares, nobody reads it.
At least, the number of readers is not as many as you thought.
You put your personal ideas and thoughts into the article, carefully structuring each sentence, and choose a great image‚Äîthen, no response, no likes, no shares, no activity.
So, what is the meaning of writing a blog?
First, there are two misconceptions about blogging.
One is that if I write a good article, readers will come naturally.
No, they won‚Äôt come. There are billions of blogs on the internet, like a massive hurricane, and yours is just a single leaf in the wind. Who would notice?
Another misconception is that if nobody reads it, writing is a waste of time.
Blogs have their own hidden value.
You write blogs not for the applause of others, but for your own needs.
Blogs help clear your mind. They help you organize your thoughts and sharpen your perspective.
When you think better, you will achieve better results.
The target audience of a blog is actually not the people on the internet, but your future self. Your article will help you see the evolution of your own thoughts.
Additionally, one day in the future, someone who truly needs your article will find it.
A deep, thoughtful article has a longer-lasting impact than a viral article.
Writing a blog is quite like street photography. You take your camera and walk through the city.
You see a scene‚Äîa moment filled with light, shadow, and humanity‚Äîand then you capture it.
Nobody cares about what you actually captured. But that‚Äôs not the reason you photograph; you photograph because you see something interesting.
Writing a blog is the same. You write a blog because you are thinking, observing new things, and hope to store them somewhere.
If someone reads it, that&rsquo;s great. If not, you‚Äôve still completed your work</p>
]]></content:encoded>
    </item>
    <item>
      <title>Time Complexity Notations</title>
      <link>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</guid>
      <description>&lt;p&gt;In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O &lt;code&gt;O(n)&lt;/code&gt; notation before, but for Big theta &lt;code&gt;Œ∏(n)&lt;/code&gt; and reccurence relations &lt;code&gt;T(n)&lt;/code&gt;, I never heard them before. Today, I hope I can finally figure them out.&lt;/p&gt;
&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;
&lt;p&gt;T(n) represents the actual running time of an algorithm&lt;br&gt;
O(n) represents the asymptotic upper bound of the running time of an algorithm&lt;br&gt;
Œ∏(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O <code>O(n)</code> notation before, but for Big theta <code>Œ∏(n)</code> and reccurence relations <code>T(n)</code>, I never heard them before. Today, I hope I can finally figure them out.</p>
<h1 id="what">What</h1>
<p>T(n) represents the actual running time of an algorithm<br>
O(n) represents the asymptotic upper bound of the running time of an algorithm<br>
Œ∏(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.</p>
<h1 id="how-to-convert-the-three-of-them">How to convert the three of them</h1>
<ul>
<li>Normally we can directly transfer T(n) to O(n) or Œ∏(n).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Int sum <span style="color:#f92672">=</span> 0
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">for</span> (i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> n, i <span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> sum <span style="color:#f92672">+</span> i
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a classical example,
First of all, we initialize variable <code>sum</code> requires one unit of running time. There are three statements inside the for loop, statement 1 <code>i = 1</code> requires one unit of the running time, statement 2 <code>i &lt;= n</code> requires n+1 units of the running time,
statement 3 <code>i ++</code> requires n units of the runningn time,
and <code>sum = sum + i</code> requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3.  In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / Œ∏(n).</p>
<p>When the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication.
<img alt="High Precision Multiplication and Karatsuba Multiplication example" loading="lazy" src="/Hand_write_note/IMG_2181.jpeg">
There are two methods to convert T(n) into O(n)</p>
<ol>
<li>Recursion tree method
<img alt="Recursion tree method" loading="lazy" src="/Hand_write_note/IMG_2183.jpeg"></li>
<li>According to Recursion tree method, we derive master theorem
<img alt="Master Theorem" loading="lazy" src="/Hand_write_note/IMG_2184.jpeg"></li>
</ol>
<p>The time complexity of multiplication is equal to the time complexity of division</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
