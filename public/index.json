[{"content":"In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O O(n) notation before, but for Big theta θ(n) and reccurence relations T(n), I never heard them before. Today, I hope I can finally figure them out.\nWhat T(n) represents the actual running time of an algorithm\nO(n) represents the asymptotic upper bound of the running time of an algorithm\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\nHow to convert the three of them Normally we can directly transfer T(n) to O(n) or θ(n). Int sum = 0 for (i = 1; i \u0026lt;= n, i ++) { sum = sum + i } This is a classical example, First of all, we initialize variable sum requires one unit of running time. There are three statements inside the for loop, statement 1 i = 1 requires one unit of the running time, statement 2 i \u0026lt;= n requires n+1 units of the running time, statement 3 i ++ requires n units of the runningn time, and sum = sum + i requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3. In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / θ(n).\nWhen the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication. There are two methods to convert T(n) into O(n)\n","permalink":"http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/","summary":"\u003cp\u003eIn this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O \u003ccode\u003eO(n)\u003c/code\u003e notation before, but for Big theta \u003ccode\u003eθ(n)\u003c/code\u003e and reccurence relations \u003ccode\u003eT(n)\u003c/code\u003e, I never heard them before. Today, I hope I can finally figure them out.\u003c/p\u003e\n\u003ch1 id=\"what\"\u003eWhat\u003c/h1\u003e\n\u003cp\u003eT(n) represents the actual running time of an algorithm\u003cbr\u003e\nO(n) represents the asymptotic upper bound of the running time of an algorithm\u003cbr\u003e\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\u003c/p\u003e","title":"The Difference between T(n) , O(n) and θ(n)"},{"content":"This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\nOverview The machine model is HP-Elitedesk-800-G4-SFF. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\nIf you want to learn more here is the machine datasheet:server_datasheet\nHardware Motherboard: Q370 viewer CPU: i5-8500 GPU: intel UHD 630 RAM: 16G SSD: 256G HDD: 500G * 1 The motherboard provides a high flexibility to expand more internal storage, also it has 4 PCie expansion slots which can used to expand more storage space or other components you want.\nSoftware nextcloud\nemail domain\ngitlab\nminecraft server\ndocker\njellyin\nsynthing\nproxy?router?gateway?\nvirtual machine\nI host my server with ubuntu server distro. The reason I didn\u0026rsquo;t choose proxmox is because I want to learn server step by step, proxmox is great in visualization, maybe in the future, I will try it.\nDurign the process of configuring storage, I learned LVM, which is a wonderful tool for those users that has multiple drives. User can create a storage pool called volume group. Firstly, user add their physical volumes into volumn group, and we create logical volumn based on the storage area had in volumn groups, and then we mount those LVs with the actural dirctory. It seems like Windows is not able to achieve this function. For RAID, we seperate it into 4 different categories, radi0, raid1, raid5 and raid10. This tools shows how to save files in different number of drives or in LVM.\nFor external access, I plan to use cloudflare tunnel. They provide such service, I need to buy a domain name and combine it with the cloudflare tunnel, and when I access the server, I firstly type the domain name in my browser to ask cloudflare, and they will guide me to the tunnel to my server, also in server end, I need to install cloudflared docker image as an end, then it works! It\u0026rsquo;s so convenient for those people who live in school accommodation. And it\u0026rsquo;s totally free!\nIn my network configuration. I didn\u0026rsquo;t install a router, but the best choice is to using a router for all devices in my home, and assign each of them an static IP address. To access the server, I bought a portable monitor, since the IP address of my server using DHCP, which required to check the IP address manually when the machine reboot or close. This issue will be solved easily when I have a router. Nowadays, I need to change the tunnels configuration to enable external access.\nsince I have 3 different operating 3systems in my three daily devices, phone for android, laptop for arachlinux and ipad for ipados, I installed nextcloud docker to try to integrate them into one ecosystem, that pretty awesome.\n","permalink":"http://localhost:1313/posts/homeserver/","summary":"\u003cp\u003eThis week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\u003c/p\u003e\n\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe machine model is \u003ccode\u003eHP-Elitedesk-800-G4-SFF\u003c/code\u003e. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\u003cbr\u003e\n\u003cimg loading=\"lazy\" src=\"/serverbill.png\"\u003e\u003c/p\u003e","title":"My Homelab"},{"content":"This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\nIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\nHow the JVM works The JVM executes er programs in several stages:\nCompilation: Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).\nClass Loading: The JVM loads compiled bytecode when required.\nBytecode Verification: Ensures security and correctness before execution.\nExecution: The JVM interprets or compiles bytecode using Just-In-Time (JIT) compilation.\nGarbage Collection: The JVM automatically manages memory, reclaiming unused objects.\nClass loader One of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.\nLet\u0026rsquo;s explore this concept with an example: Imagine you\u0026rsquo;re watching a movie on a streaming service.\nLoading:\nThe service first finds and imports the movie data you want to watch. Similarly, the class loader locates the binary data for a Java class. Linking: Verification: Before you watch the movie, the service checks that the file isn\u0026rsquo;t corrupted. In Java, the class loader verifies the correctness of the class. Preparation: The service sets up the necessary space in memory to buffer the movie. Java allocates memory for variables and sets default values. Resolution: The service ensures all necessary subtitles or audio tracks are ready to play. Java resolves references to make them direct. Initialization:\nAs you start watching, the service begins playing the movie. Similarly, Java runs code to set up variables with their starting values. Class Loader Types:\nBootstrap Class Loader: Like the service\u0026rsquo;s core library of well-known movies, it loads fundamental, trusted classes. Extension Class Loader: Similar to special add-on features, it loads additional classes outside the core library. System/Application Class Loader: Like searching for new releases or user-uploaded content, it loads classes specific to the application you’re using. Virtual machine architecture Cross-Platform Compatibility and Limitations The JVM abstracts away the underlying hardware and operating system specifics, allowing Java bytecode to run on any device equipped with a compatible JVM. This cross-platform capability greatly simplified software distribution and development, as developers could write code once and deploy it across various platforms without modification.\nDespite its strong cross-platform capabilities, the JVM faced significant challenges due to competitive corporate strategies, particularly the \u0026ldquo;Embrace, Extend, and Extinguish\u0026rdquo; (EEE) approach adopted by some companies like Microsoft in the late 1990s. This strategy involved embracing a technology, extending it with proprietary features, and eventually using those extensions to undermine the original technology.\nMicrosoft initially embraced Java by integrating it into their Internet Explorer browser and Windows platforms. However, they extended Java with proprietary features that were specific to Windows, creating a version of Java that was incompatible with the standard JVM specifications set by Sun Microsystems. This move fragmented the Java platform and undermined the \u0026ldquo;Write Once, Run Anywhere\u0026rdquo; philosophy.\nWith the development and rise of programming languages like Swift, Kotlin, and JavaScript, the JVM faced significant challenges in maintaining its performance edge. Swift, designed by Apple for iOS and macOS platforms, offers high performance and safety due to its compiled nature and modern language features. Kotlin, although initially running on the JVM, introduced concise syntax and advanced features that surpassed Java in many ways, leading it to become the preferred language for Android development. JavaScript\u0026rsquo;s performance greatly improved with engines like V8, and its versatility expanded through technologies like Node.js for server-side development. These languages not only matched but often exceeded the JVM\u0026rsquo;s performance and adaptability in their respective domains, leading to a shift in developer preferences and a relative decline in the JVM\u0026rsquo;s dominance.\nOverall Nowadays, Java has become to a normal programming lauguage. And the question is obvious solved. Python has its own interpreter to transfer the source code into machine code. Haskell has its own compiler, C++/C are compiled directly into machine code. However,they can\u0026rsquo;t generate a compiled file that enable to run in every operating system. If there is no EEE strategy, Linux may have a stronger effects in today\u0026rsquo;s world.\n","permalink":"http://localhost:1313/posts/jvm/","summary":"\u003cp\u003eThis semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\u003c/p\u003e","title":"Ambitious Cross-Platform Dream: JVM's Achievements and Limitations"},{"content":"In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O O(n) notation before, but for Big theta θ(n) and reccurence relations T(n), I never heard them before. Today, I hope I can finally figure them out.\nWhat T(n) represents the actual running time of an algorithm\nO(n) represents the asymptotic upper bound of the running time of an algorithm\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\nHow to convert the three of them Normally we can directly transfer T(n) to O(n) or θ(n). Int sum = 0 for (i = 1; i \u0026lt;= n, i ++) { sum = sum + i } This is a classical example, First of all, we initialize variable sum requires one unit of running time. There are three statements inside the for loop, statement 1 i = 1 requires one unit of the running time, statement 2 i \u0026lt;= n requires n+1 units of the running time, statement 3 i ++ requires n units of the runningn time, and sum = sum + i requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3. In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / θ(n).\nWhen the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication. There are two methods to convert T(n) into O(n)\n","permalink":"http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/","summary":"\u003cp\u003eIn this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O \u003ccode\u003eO(n)\u003c/code\u003e notation before, but for Big theta \u003ccode\u003eθ(n)\u003c/code\u003e and reccurence relations \u003ccode\u003eT(n)\u003c/code\u003e, I never heard them before. Today, I hope I can finally figure them out.\u003c/p\u003e\n\u003ch1 id=\"what\"\u003eWhat\u003c/h1\u003e\n\u003cp\u003eT(n) represents the actual running time of an algorithm\u003cbr\u003e\nO(n) represents the asymptotic upper bound of the running time of an algorithm\u003cbr\u003e\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\u003c/p\u003e","title":"The Difference between T(n) , O(n) and θ(n)"},{"content":"This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\nOverview The machine model is HP-Elitedesk-800-G4-SFF. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\nIf you want to learn more here is the machine datasheet:server_datasheet\nHardware Motherboard: Q370 viewer CPU: i5-8500 GPU: intel UHD 630 RAM: 16G SSD: 256G HDD: 500G * 1 The motherboard provides a high flexibility to expand more internal storage, also it has 4 PCie expansion slots which can used to expand more storage space or other components you want.\nSoftware nextcloud\nemail domain\ngitlab\nminecraft server\ndocker\njellyin\nsynthing\nproxy?router?gateway?\nvirtual machine\nI host my server with ubuntu server distro. The reason I didn\u0026rsquo;t choose proxmox is because I want to learn server step by step, proxmox is great in visualization, maybe in the future, I will try it.\nDurign the process of configuring storage, I learned LVM, which is a wonderful tool for those users that has multiple drives. User can create a storage pool called volume group. Firstly, user add their physical volumes into volumn group, and we create logical volumn based on the storage area had in volumn groups, and then we mount those LVs with the actural dirctory. It seems like Windows is not able to achieve this function. For RAID, we seperate it into 4 different categories, radi0, raid1, raid5 and raid10. This tools shows how to save files in different number of drives or in LVM.\nFor external access, I plan to use cloudflare tunnel. They provide such service, I need to buy a domain name and combine it with the cloudflare tunnel, and when I access the server, I firstly type the domain name in my browser to ask cloudflare, and they will guide me to the tunnel to my server, also in server end, I need to install cloudflared docker image as an end, then it works! It\u0026rsquo;s so convenient for those people who live in school accommodation. And it\u0026rsquo;s totally free!\nIn my network configuration. I didn\u0026rsquo;t install a router, but the best choice is to use a router for all devices in my home, and assign each of them an static IP address. To access the server, I bought a portable monitor, since the IP address of my server using DHCP, which required to check the IP address manually when the machine reboot or close. This issue will be solved easily when I have a router. Nowadays, I need to change the tunnels configuration to enable external access.\nsince I have 3 different operating 3systems in my three daily devices, phone for android, laptop for arachlinux and ipad for ipados, I installed nextcloud docker to try to integrate them into one ecosystem, that pretty awesome.\n","permalink":"http://localhost:1313/posts/homeserver/","summary":"\u003cp\u003eThis week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\u003c/p\u003e\n\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe machine model is \u003ccode\u003eHP-Elitedesk-800-G4-SFF\u003c/code\u003e. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\u003cbr\u003e\n\u003cimg loading=\"lazy\" src=\"/serverbill.png\"\u003e\u003c/p\u003e","title":"My Homelab"},{"content":"This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\nIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\nHow the JVM works The JVM executes er programs in several stages:\nCompilation: Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).\nClass Loading: The JVM loads compiled bytecode when required.\nBytecode Verification: Ensures security and correctness before execution.\nExecution: The JVM interprets or compiles bytecode using Just-In-Time (JIT) compilation.\nGarbage Collection: The JVM automatically manages memory, reclaiming unused objects.\nClass loader One of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.\nLet\u0026rsquo;s explore this concept with an example: Imagine you\u0026rsquo;re watching a movie on a streaming service.\nLoading:\nThe service first finds and imports the movie data you want to watch. Similarly, the class loader locates the binary data for a Java class. Linking: Verification: Before you watch the movie, the service checks that the file isn\u0026rsquo;t corrupted. In Java, the class loader verifies the correctness of the class. Preparation: The service sets up the necessary space in memory to buffer the movie. Java allocates memory for variables and sets default values. Resolution: The service ensures all necessary subtitles or audio tracks are ready to play. Java resolves references to make them direct. Initialization:\nAs you start watching, the service begins playing the movie. Similarly, Java runs code to set up variables with their starting values. Class Loader Types:\nBootstrap Class Loader: Like the service\u0026rsquo;s core library of well-known movies, it loads fundamental, trusted classes. Extension Class Loader: Similar to special add-on features, it loads additional classes outside the core library. System/Application Class Loader: Like searching for new releases or user-uploaded content, it loads classes specific to the application you’re using. Virtual machine architecture Cross-Platform Compatibility and Limitations The JVM abstracts away the underlying hardware and operating system specifics, allowing Java bytecode to run on any device equipped with a compatible JVM. This cross-platform capability greatly simplified software distribution and development, as developers could write code once and deploy it across various platforms without modification.\nDespite its strong cross-platform capabilities, the JVM faced significant challenges due to competitive corporate strategies, particularly the \u0026ldquo;Embrace, Extend, and Extinguish\u0026rdquo; (EEE) approach adopted by some companies like Microsoft in the late 1990s. This strategy involved embracing a technology, extending it with proprietary features, and eventually using those extensions to undermine the original technology.\nMicrosoft initially embraced Java by integrating it into their Internet Explorer browser and Windows platforms. However, they extended Java with proprietary features that were specific to Windows, creating a version of Java that was incompatible with the standard JVM specifications set by Sun Microsystems. This move fragmented the Java platform and undermined the \u0026ldquo;Write Once, Run Anywhere\u0026rdquo; philosophy.\nWith the development and rise of programming languages like Swift, Kotlin, and JavaScript, the JVM faced significant challenges in maintaining its performance edge. Swift, designed by Apple for iOS and macOS platforms, offers high performance and safety due to its compiled nature and modern language features. Kotlin, although initially running on the JVM, introduced concise syntax and advanced features that surpassed Java in many ways, leading it to become the preferred language for Android development. JavaScript\u0026rsquo;s performance greatly improved with engines like V8, and its versatility expanded through technologies like Node.js for server-side development. These languages not only matched but often exceeded the JVM\u0026rsquo;s performance and adaptability in their respective domains, leading to a shift in developer preferences and a relative decline in the JVM\u0026rsquo;s dominance.\nOverall Nowadays, Java has become to a normal programming lauguage. And the question is obvious solved. Python has its own interpreter to transfer the source code into machine code. Haskell has its own compiler, C++/C are compiled directly into machine code. However,they can\u0026rsquo;t generate a compiled file that enable to run in every operating system. If there is no EEE strategy, Linux may have a stronger effects in today\u0026rsquo;s world.\n","permalink":"http://localhost:1313/posts/jvm/","summary":"\u003cp\u003eThis semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\u003c/p\u003e","title":"Ambitious Cross-Platform Dream: JVM's Achievements and Limitations"},{"content":"In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O O(n) notation before, but for Big theta θ(n) and reccurence relations T(n), I never heard them before. Today, I hope I can finally figure them out.\nWhat T(n) represents the actual running time of an algorithm\nO(n) represents the asymptotic upper bound of the running time of an algorithm\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\nHow to convert the three of them Normally we can directly transfer T(n) to O(n) or θ(n). Int sum = 0 for (i = 1; i \u0026lt;= n, i ++) { sum = sum + i } This is a classical example, First of all, we initialize variable sum requires one unit of running time. There are three statements inside the for loop, statement 1 i = 1 requires one unit of the running time, statement 2 i \u0026lt;= n requires n+1 units of the running time, statement 3 i ++ requires n units of the runningn time, and sum = sum + i requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3. In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / θ(n).\nWhen the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication. There are two methods to convert T(n) into O(n)\n","permalink":"http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/","summary":"\u003cp\u003eIn this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O \u003ccode\u003eO(n)\u003c/code\u003e notation before, but for Big theta \u003ccode\u003eθ(n)\u003c/code\u003e and reccurence relations \u003ccode\u003eT(n)\u003c/code\u003e, I never heard them before. Today, I hope I can finally figure them out.\u003c/p\u003e\n\u003ch1 id=\"what\"\u003eWhat\u003c/h1\u003e\n\u003cp\u003eT(n) represents the actual running time of an algorithm\u003cbr\u003e\nO(n) represents the asymptotic upper bound of the running time of an algorithm\u003cbr\u003e\nθ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.\u003c/p\u003e","title":"The Difference between T(n) , O(n) and θ(n)"},{"content":"This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\nOverview The machine model is HP-Elitedesk-800-G4-SFF. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\nIf you want to learn more here is the machine datasheet:server_datasheet\nHardware Motherboard: Q370 viewer CPU: i5-8500 GPU: intel UHD 630 RAM: 16G SSD: 256G HDD: 500G * 1 The motherboard provides a high flexibility to expand more internal storage, also it has 4 PCie expansion slots which can used to expand more storage space or other components you want.\nSoftware nextcloud\nemail domain\ngitlab\nminecraft server\ndocker\njellyin\nsynthing\nproxy?router?gateway?\nvirtual machine\nI host my server with ubuntu server distro. The reason I didn\u0026rsquo;t choose proxmox is because I want to learn server step by step, proxmox is great in visualization, maybe in the future, I will try it.\nDurign the process of configuring storage, I learned LVM, which is a wonderful tool for those users that has multiple drives. User can create a storage pool called volume group. Firstly, user add their physical volumes into volumn group, and we create logical volumn based on the storage area had in volumn groups, and then we mount those LVs with the actural dirctory. It seems like Windows is not able to achieve this function. For RAID, we seperate it into 4 different categories, radi0, raid1, raid5 and raid10. This tools shows how to save files in different number of drives or in LVM.\nFor external access, I plan to use cloudflare tunnel. They provide such service, I need to buy a domain name and combine it with the cloudflare tunnel, and when I access the server, I firstly type the domain name in my browser to ask cloudflare, and they will guide me to the tunnel to my server, also in server end, I need to install cloudflared docker image as an end, then it works! It\u0026rsquo;s so convenient for those people who live in school accommodation. And it\u0026rsquo;s totally free!\nIn my network configuration. I didn\u0026rsquo;t install a router, but the best choice is to use a router for all devices in my home, and assign each of them an static IP address. To access the server, I bought a portable monitor, since the IP address of my server using DHCP, which required to check the IP address manually when the machine reboot or close. This issue will be solved easily when I have a router. Nowadays, I need to change the tunnels configuration to enable external access.\nsince I have 3 different operating systems in my three daily devices, phone for android, laptop for arachlinux and ipad for ipados, I installed nextcloud docker to try to integrate them into one ecosystem, that pretty awesome.\n","permalink":"http://localhost:1313/posts/homeserver/","summary":"\u003cp\u003eThis week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.\u003c/p\u003e\n\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe machine model is \u003ccode\u003eHP-Elitedesk-800-G4-SFF\u003c/code\u003e. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.\u003cbr\u003e\n\u003cimg loading=\"lazy\" src=\"/serverbill.png\"\u003e\u003c/p\u003e","title":"My Homelab"},{"content":"This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\nIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\nHow the JVM works The JVM executes er programs in several stages:\nCompilation: Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).\nClass Loading: The JVM loads compiled bytecode when required.\nBytecode Verification: Ensures security and correctness before execution.\nExecution: The JVM interprets or compiles bytecode using Just-In-Time (JIT) compilation.\nGarbage Collection: The JVM automatically manages memory, reclaiming unused objects.\nClass loader One of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.\nLet\u0026rsquo;s explore this concept with an example: Imagine you\u0026rsquo;re watching a movie on a streaming service.\nLoading:\nThe service first finds and imports the movie data you want to watch. Similarly, the class loader locates the binary data for a Java class. Linking: Verification: Before you watch the movie, the service checks that the file isn\u0026rsquo;t corrupted. In Java, the class loader verifies the correctness of the class. Preparation: The service sets up the necessary space in memory to buffer the movie. Java allocates memory for variables and sets default values. Resolution: The service ensures all necessary subtitles or audio tracks are ready to play. Java resolves references to make them direct. Initialization:\nAs you start watching, the service begins playing the movie. Similarly, Java runs code to set up variables with their starting values. Class Loader Types:\nBootstrap Class Loader: Like the service\u0026rsquo;s core library of well-known movies, it loads fundamental, trusted classes. Extension Class Loader: Similar to special add-on features, it loads additional classes outside the core library. System/Application Class Loader: Like searching for new releases or user-uploaded content, it loads classes specific to the application you’re using. Virtual machine architecture Cross-Platform Compatibility and Limitations The JVM abstracts away the underlying hardware and operating system specifics, allowing Java bytecode to run on any device equipped with a compatible JVM. This cross-platform capability greatly simplified software distribution and development, as developers could write code once and deploy it across various platforms without modification.\nDespite its strong cross-platform capabilities, the JVM faced significant challenges due to competitive corporate strategies, particularly the \u0026ldquo;Embrace, Extend, and Extinguish\u0026rdquo; (EEE) approach adopted by some companies like Microsoft in the late 1990s. This strategy involved embracing a technology, extending it with proprietary features, and eventually using those extensions to undermine the original technology.\nMicrosoft initially embraced Java by integrating it into their Internet Explorer browser and Windows platforms. However, they extended Java with proprietary features that were specific to Windows, creating a version of Java that was incompatible with the standard JVM specifications set by Sun Microsystems. This move fragmented the Java platform and undermined the \u0026ldquo;Write Once, Run Anywhere\u0026rdquo; philosophy.\nWith the development and rise of programming languages like Swift, Kotlin, and JavaScript, the JVM faced significant challenges in maintaining its performance edge. Swift, designed by Apple for iOS and macOS platforms, offers high performance and safety due to its compiled nature and modern language features. Kotlin, although initially running on the JVM, introduced concise syntax and advanced features that surpassed Java in many ways, leading it to become the preferred language for Android development. JavaScript\u0026rsquo;s performance greatly improved with engines like V8, and its versatility expanded through technologies like Node.js for server-side development. These languages not only matched but often exceeded the JVM\u0026rsquo;s performance and adaptability in their respective domains, leading to a shift in developer preferences and a relative decline in the JVM\u0026rsquo;s dominance.\nOverall Nowadays, Java has become to a normal programming lauguage. And the question is obvious solved. Python has its own interpreter to transfer the source code into machine code. Haskell has its own compiler, C++/C are compiled directly into machine code. However,they can\u0026rsquo;t generate a compiled file that enable to run in every operating system. If there is no EEE strategy, Linux may have a stronger effects in today\u0026rsquo;s world.\n","permalink":"http://localhost:1313/posts/jvm/","summary":"\u003cp\u003eThis semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn\u0026rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: \u0026ldquo;Write Once, Run Anywhere.\u0026rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let\u0026rsquo;s have a look about how JVM works.\u003c/p\u003e","title":"Ambitious Cross-Platform Dream: JVM's Achievements and Limitations"}]