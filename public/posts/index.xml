<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on King&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on King&#39;s Blog</description>
    <generator>Hugo -- 0.146.3</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>For UNIX Week | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek3/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek3/</guid>
      <description>&lt;h2 id=&#34;book---unix-a-history-and-a-memoir&#34;&gt;Book - Unix: A History and a Memoir&lt;/h2&gt;
&lt;p&gt;Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &amp;ldquo;why&amp;rdquo; questions I had when I learning linux system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AT&amp;amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.&lt;/li&gt;
&lt;li&gt;The system developed before Unix was called Multics.&lt;/li&gt;
&lt;li&gt;Since “Multics” already used “multi,” the early name of Unix was “Unics.”&lt;/li&gt;
&lt;li&gt;Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn’t written for the PDP-10.&lt;/li&gt;
&lt;li&gt;Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.&lt;/li&gt;
&lt;li&gt;Unix eventually declined due to copyright issues. AT&amp;amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.&lt;/li&gt;
&lt;li&gt;GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.&lt;/li&gt;
&lt;li&gt;MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.&lt;/li&gt;
&lt;li&gt;In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.&lt;/li&gt;
&lt;li&gt;MINIX was widely used because it was embedded in Intel chips.&lt;/li&gt;
&lt;li&gt;The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.&lt;/li&gt;
&lt;li&gt;Microsoft once had its 3own Unix-like system.&lt;/li&gt;
&lt;li&gt;Another completely different path from Unix was MS-DOS, which eventually evolved into today’s Windows.&lt;/li&gt;
&lt;li&gt;You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.&lt;/li&gt;
&lt;li&gt;“Everything is a file” is one of the core principles of Unix.&lt;/li&gt;
&lt;li&gt;The KISS principle (“Keep It Simple, Stupid”) is a fundamental part of Unix philosophy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The UNIX philosophy is very similar to some programming concepts I&amp;rsquo;ve recently learned at university. That&amp;rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="book---unix-a-history-and-a-memoir">Book - Unix: A History and a Memoir</h2>
<p>Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &ldquo;why&rdquo; questions I had when I learning linux system.</p>
<ol>
<li>AT&amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.</li>
<li>The system developed before Unix was called Multics.</li>
<li>Since “Multics” already used “multi,” the early name of Unix was “Unics.”</li>
<li>Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn’t written for the PDP-10.</li>
<li>Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.</li>
<li>Unix eventually declined due to copyright issues. AT&amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.</li>
<li>GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.</li>
<li>MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.</li>
<li>In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.</li>
<li>MINIX was widely used because it was embedded in Intel chips.</li>
<li>The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.</li>
<li>Microsoft once had its 3own Unix-like system.</li>
<li>Another completely different path from Unix was MS-DOS, which eventually evolved into today’s Windows.</li>
<li>You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.</li>
<li>“Everything is a file” is one of the core principles of Unix.</li>
<li>The KISS principle (“Keep It Simple, Stupid”) is a fundamental part of Unix philosophy.</li>
</ol>
<p>The UNIX philosophy is very similar to some programming concepts I&rsquo;ve recently learned at university. That&rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.</p>
<ol>
<li>Keep it simple stupid</li>
<li>Do one thing, and do it well</li>
<li>Everything is a file</li>
<li>Make each program a filter</li>
<li>Fail loudly</li>
<li>Modularity</li>
<li>Prototyping early</li>
</ol>
<p>In today, many barriers had already been removed.<br>
And I realise.<br>
The revolution of AI is just like the reenactment of Unix&rsquo;s development.<br>
So.<br>
KISS.</p>
<h2 id="trivias">Trivias</h2>
<ol>
<li>tty - TeleTYpewriter, terminal in the old time, before lcd screen been invented.<img src="/TechStuff/Teletype_model_33.jpg" alt="teletype model 33" width="500" height="600"></li>
<li>UNIX was developed on the PDP-7, a computer with no screen, no mouse and only 8KB of RAM. It weighted nearly 500kg. <img alt="pdp7" loading="lazy" src="/TechStuff/Pdp7.jpeg"></li>
<li>UNIX and UNIX-like system use abbreviated commands because typing on TTY terminals in the 1960s was slow and insufficient.</li>
<li>Second-system effect: It believes that after completing a small, elegant, and successful system, people tend to have overly high expectations for the next projects, which may lead to the creation of a huge, feature-rich but monstrous system.The &ldquo;second-system effect&rdquo; can result in software project plans being overdesigned, with too many variables and excessive complexity, ultimately falling short of expectations and leading to failure. such as PL/I in Multics</li>
<li>Fortran(formular translation): The purpose of this lagnauge is to proceed mathematics formular and float number in an efficient way, like integration, linear algebra. That&rsquo;s why fortran is still popular in some supercomputer and scientific calculation.</li>
<li>B lagnauge is designed in a bit-unit computer PCP-7, where C langauge is designed in a byte-unit computer. Therefore the main difference between B and C is B langauge doesn&rsquo;t support types and C does.</li>
<li>Development of Clang: PL/I -&gt; BCPL -&gt; B -&gt; New B(C)</li>
<li>If computers using the same cpu architecture, they will using the same assembly language.<img alt="assembly_langauge_with_architecture" loading="lazy" src="/TechStuff/assembly_langauge_diff.png"></li>
<li>The grep command is used to find lines that match a specific pattern in a file while the sed command is used to insert, replace and delete text from a file. Finally, the awk command supports programming logic and is often used for advanced data processing tasks.</li>
<li>The development of UNIX from 1970 until now. <img alt="road of unix" loading="lazy" src="/TechStuff/roadOfUNIX.png"></li>
</ol>
<h2 id="talks">Talks</h2>
<ol>
<li>&ldquo;A new technological discovery is often discredited by older generations of professionals - especially those with high authority and prestige in the existing field - in order to protect their own status&rdquo;</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Jarvis Will Coming Soon | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek2/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek2/</guid>
      <description>&lt;h2 id=&#34;model-context-protocol-overview&#34;&gt;Model Context Protocol overview&lt;/h2&gt;
&lt;p&gt;MCP (Model Context Protocol) can be understood as a &amp;ldquo;universal language&amp;rdquo; for communication between AI and external tools. It&amp;rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.&lt;/p&gt;
&lt;h4 id=&#34;why-is-mcp-needed&#34;&gt;Why is MCP needed?&lt;/h4&gt;
&lt;p&gt;In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications × M tools = N×M interfaces).&lt;br&gt;
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
&lt;img alt=&#34;components mcp include&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/TechStuff/mcp.png&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="model-context-protocol-overview">Model Context Protocol overview</h2>
<p>MCP (Model Context Protocol) can be understood as a &ldquo;universal language&rdquo; for communication between AI and external tools. It&rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.</p>
<h4 id="why-is-mcp-needed">Why is MCP needed?</h4>
<p>In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications × M tools = N×M interfaces).<br>
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp.png"></p>
<p>The current components of MCP servers include:
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp_include.png"></p>
<h4 id="how-does-mcp-work">How does MCP work?</h4>
<p><img alt="how mcp work" loading="lazy" src="/TechStuff/mcp_work.png"></p>
<h4 id="example">Example:</h4>
<p>Suppose you&rsquo;re using an AI assistant to manage your work, and it wants to help you schedule today&rsquo;s meeting:</p>
<ul>
<li>
<p>Without MCP, developers would need to write separate integration code for Outlook, Google Calendar, and Apple Calendar.</p>
</li>
<li>
<p>With MCP, the AI only needs to call the MCP server, which will automatically interface with your calendar system. No matter which calendar service you use, the AI can work seamlessly.</p>
</li>
</ul>
<h4 id="core-functions-of-mcp">Core Functions of MCP:</h4>
<ul>
<li>
<p>Reducing development costs (no need to develop separate integrations for each tool).</p>
</li>
<li>
<p>Enhancing AI&rsquo;s ability to access external data (allowing AI to easily query and manipulate external data).</p>
</li>
<li>
<p>Standardizing communication (making communication between different AI applications and tools smoother).</p>
</li>
</ul>
<p>You can think of MCP as the &ldquo;USB interface for AI&rdquo;—any AI device can plug into different tools without needing to individually adapt to each one!</p>
<hr>
<h2 id="trivias">Trivias:</h2>
<ol>
<li><code>Graph</code> is a great data structure, it can be used to find the shortest path, solve a magic cube.
Rely on this data structure, Human find the shortest steps to solve the worst case configured
<code>3\*3\*3</code> magic cube in <strong>20</strong> steps (which also called god&rsquo;s number) and 11 steps for <code>2\*2\*2</code> one. What about n*n*n, Here is an interesing paper
about time compleixity of solving a n*n*n magic cube: <a href="/Demaine_Algoritms_for_solving.pdf">Algorithms for Solving Rubik’s Cubes</a></li>
<li>Topological sort is an algorithm based on DFS and DAG, It&rsquo;s not a traditional sorting algorithm, like comparing the size of each number and sort them, but sorting based on dependencies.</li>
<li>Dynamic programming is just like recursion + memorization + guessing</li>
<li>P vs NP problems: P is a problem  that can be solved easily by a computer, NP is a problem that you can check for correctness very easily once solved. However, P != NP for example wec can&rsquo;t engineer luck.
Also, NP hard means it is at least as hard as any problem in NP, and NP-complete is lke if you can solve one NP-complete question, you can solve all NP question.
Reduction is like to prove a known NP-complete question, and transfer it into a NP question X, then X is also a NP-complete question</li>
<li>HTTP vs REST API
<ul>
<li>
<p>HTTP is a protocol, and its core task is to define how to request and transfer data between your broswer and server</p>
<ul>
<li>It focuses on the data exchange level, regardless of whether the data is an image, text, video, or API response.</li>
<li>For example, you can use an HTTP request to access a webpage (HTML page) or use an HTTP request to retrieve API data (JSON data). It doesn’t care about what data you&rsquo;re transmitting.</li>
</ul>
</li>
<li>
<p>REST API is a design style, based on the HTTP protocol, with rules and best practices:</p>
<ul>
<li>It views content on the server as &ldquo;resources&rdquo; and specifies how to operate on them using HTTP methods (GET, POST, PUT, DELETE).</li>
<li>REST API design considers resource orientation: Resources (like users, articles, comments, etc.) have unique identifiers (URIs), and clients interact with these resources through HTTP requests.</li>
</ul>
<p>For example, in a REST API, you can:</p>
<ul>
<li>GET request: Retrieve a resource (e.g., get movie information).</li>
<li>POST request: Create a new resource (e.g., submit a new comment).</li>
<li>PUT request: Update a resource (e.g., modify user information).</li>
<li>DELETE request: Delete a resource (e.g., remove an article).</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="resource">Resource:</h2>
<ol>
<li>A tool to build a personal streaming music player: <a href="https://www.navidrome.org/">navidrome</a></li>
<li>A great blog that introduce human visualization: <a href="https://www-sciencedirect-com.eux.idm.oclc.org/science/article/pii/B9780128038130000040#f0015">human visualization</a></li>
<li>Five basic algorithms explanation:
<ul>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp">Dynamic programming</a></li>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">Greedy Algorithm</a></li>
<li><a href="https://www.bilibili.com/video/BV1wi4y157er?spm_id_from=333.788.videopod.sections&amp;vd_source=783331b1d88fa190b5ce8305307e0af5">Backtracking</a></li>
<li><a href="https://chatgpt.com/share/67d76084-79f0-8006-8a37-4500841a7b9a">Branch and Bounding</a></li>
</ul>
</li>
<li>This week, Nvidia GTC 2025 brings a lot of new tech, PC in AI age, B300, new architecture, robots.
After watched the coverage keynotes, I was just feel like our mankind is in an special stage with unpredictable pace. In science fiction films, at this point
, it often leads to the arrival of an alien civilization.
<img alt="GTC_2025" loading="lazy" src="https://cdn.mos.cms.futurecdn.net/QQ6ZABoJtLbUEnGLXxz2GT-970-80.png.webp"></li>
<li>A dijkstra algorithm visualiser that helps me understand it: <a href="https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">Dijkstra shortest path</a></li>
<li>MCP explain: <a href="https://www.philschmid.de/mcp-introduction">A blog that explain MCP crystal clear</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Start | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek1/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek1/</guid>
      <description>&lt;h2 id=&#34;email-sending-and-receiving-system&#34;&gt;Email sending and receiving system&lt;/h2&gt;
&lt;p&gt;The main system is build based on three protocols: SMTP, POP3 and IMAP.
&lt;img alt=&#34;process of email system&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/emailsys.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;SMTP is used for sending emails to the recipient’s email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&amp;rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&amp;rsquo;s email server using SMTP as well.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="email-sending-and-receiving-system">Email sending and receiving system</h2>
<p>The main system is build based on three protocols: SMTP, POP3 and IMAP.
<img alt="process of email system" loading="lazy" src="/emailsys.png"></p>
<p>SMTP is used for sending emails to the recipient’s email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&rsquo;s email server using SMTP as well.</p>
<p>POP3 downloads emails from the email server to the email client. By default, it removes emails from the server after downloading, but some email clients allow users to keep copies on the server.
IMAP keeps emails on the server and synchronizes them across multiple devices. The email client initially loads only the headers, and the full email content is fetched from the server when the user opens it.</p>
<p>If you want to customize an email domain. You need to have your own SMTP and IMAP/POP3 server and a domain, the other steps are the same as above.</p>
<hr>
<h2 id="pkgbuild-in-arch-linux">PKGBUILD in Arch Linux</h2>
<p>PKGBUILD is a bash script contain the build information required by archlinux package
we use makepkg script to build the package, it will search PKGBUILD first in the current folder.
<img alt="PKGBUILD process" loading="lazy" src="/Hand_write_note/pkgbuild.jpg">
Benefits:</p>
<ul>
<li>using pacman to manage, user can update and uninstall easily</li>
<li>some pkgbuild file include the commands to generate a binary file and store it in /user/bin</li>
</ul>
<p>Drawbacks:</p>
<ul>
<li>Not friendly to starter</li>
</ul>
<p>Although we can use yay to help us do all these stuff.</p>
<hr>
<h2 id="trivias">Trivias</h2>
<ol>
<li>Newton&rsquo;s method is quadratic convergence when we want to calculate the root of a number</li>
<li>Catalan number is a group of sequence that appear widely in combinatorics. e.g. ways to arrange n brackets, number of triangles in an n+2 convex polygon. The common property of these applications is that they are recursive and have a constrained structure.</li>
<li>Toom cook: It divide a d-digit number into n parts and doing arithmatic calculations.</li>
<li>Schonhage-strassen scheme: It multiplies two integers of length 𝑛 in O (𝑛 log𝑛 log log𝑛) steps on a multitape Turing machine</li>
<li>A Naive algorithm is usually the most obvious solution when one is asked a problem. It may not be a smart algorithm but will probably get the job done</li>
<li>The taste of red wine is determined by acidity, sweetness, alcohol content, tannins, and body. Wines are categorized into New World and Old World. New World wines (from countries like the USA, Chile, Argentina, and China) are named after the grape variety, while Old World wines (mainly from Europe) are named after their place of origin.<br>
Red wine is made by fermenting red grapes with their skins. White wine is made from either white grapes or red grapes without their skins. Rosé wine is made by soaking the grape skins briefly but fermenting without them. Sparkling wine undergoes a second fermentation to produce bubbles.</li>
<li>Gabriel&rsquo;s horn is a type of geometric figure that has infinite surface area but finite volume.</li>
</ol>
<hr>
<h2 id="resources">Resources</h2>
<ol>
<li>Code question(leetcode), system design question(crack the code interview), teamwork, communication are all important in the interview.</li>
<li>An old guideline to learn ai: <a href="https://www.captainai.net/itcoke/">https://www.captainai.net/itcoke/</a></li>
<li>A guideline to learn CS: <a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">https://csdiy.wiki/后记/</a></li>
<li>Useful tips to integrate by parts, 反对幂指三, to choose u.</li>
<li>Customize your zsh: <a href="https://ohmyz.sh">oh my zsh</a></li>
<li>Xiaomi releases a concept modular camera, it looks pretty awesome and innovative.
<img loading="lazy" src="/Interesting_thing/Xiaomi_modular_camera.png"></li>
<li>3b1b&rsquo;s taylor series explaination:https://www.youtube.com/watch?v=3d6DsjIBzJ4</li>
<li>3b1b&rsquo;s explaination of why we have exponential e:https://www.youtube.com/watch?v=m2MIpDrF7Es</li>
<li>This website is all about competitive writing of source code that is as short as possible: <a href="https://codegolf.stackexchange.com/">Codewolf</a></li>
<li>Explaination of greedy algorithm: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">greedy algorithm</a></li>
<li>Explaination of dynamic programming: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp#%E9%A2%98%E7%9B%AE">dynamic programming</a></li>
<li>Deploy perosonal VPN tools: <a href="https://tailscale.com/">tailscale</a></li>
</ol>
<h2 id="abstract">Abstract</h2>
<p>If no one is reading blogs anymore, why should we write them?
Let’s make it simple: you write a blog, but nobody cares, nobody reads it.
At least, the number of readers is not as many as you thought.
You put your personal ideas and thoughts into the article, carefully structuring each sentence, and choose a great image—then, no response, no likes, no shares, no activity.
So, what is the meaning of writing a blog?
First, there are two misconceptions about blogging.
One is that if I write a good article, readers will come naturally.
No, they won’t come. There are billions of blogs on the internet, like a massive hurricane, and yours is just a single leaf in the wind. Who would notice?
Another misconception is that if nobody reads it, writing is a waste of time.
Blogs have their own hidden value.
You write blogs not for the applause of others, but for your own needs.
Blogs help clear your mind. They help you organize your thoughts and sharpen your perspective.
When you think better, you will achieve better results.
The target audience of a blog is actually not the people on the internet, but your future self. Your article will help you see the evolution of your own thoughts.
Additionally, one day in the future, someone who truly needs your article will find it.
A deep, thoughtful article has a longer-lasting impact than a viral article.
Writing a blog is quite like street photography. You take your camera and walk through the city.
You see a scene—a moment filled with light, shadow, and humanity—and then you capture it.
Nobody cares about what you actually captured. But that’s not the reason you photograph; you photograph because you see something interesting.
Writing a blog is the same. You write a blog because you are thinking, observing new things, and hope to store them somewhere.
If someone reads it, that&rsquo;s great. If not, you’ve still completed your work</p>
]]></content:encoded>
    </item>
    <item>
      <title>Time Complexity Notations</title>
      <link>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</guid>
      <description>&lt;p&gt;In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O &lt;code&gt;O(n)&lt;/code&gt; notation before, but for Big theta &lt;code&gt;θ(n)&lt;/code&gt; and reccurence relations &lt;code&gt;T(n)&lt;/code&gt;, I never heard them before. Today, I hope I can finally figure them out.&lt;/p&gt;
&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;
&lt;p&gt;T(n) represents the actual running time of an algorithm&lt;br&gt;
O(n) represents the asymptotic upper bound of the running time of an algorithm&lt;br&gt;
θ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O <code>O(n)</code> notation before, but for Big theta <code>θ(n)</code> and reccurence relations <code>T(n)</code>, I never heard them before. Today, I hope I can finally figure them out.</p>
<h1 id="what">What</h1>
<p>T(n) represents the actual running time of an algorithm<br>
O(n) represents the asymptotic upper bound of the running time of an algorithm<br>
θ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.</p>
<h1 id="how-to-convert-the-three-of-them">How to convert the three of them</h1>
<ul>
<li>Normally we can directly transfer T(n) to O(n) or θ(n).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Int sum <span style="color:#f92672">=</span> 0
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">for</span> (i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> n, i <span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> sum <span style="color:#f92672">+</span> i
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a classical example,
First of all, we initialize variable <code>sum</code> requires one unit of running time. There are three statements inside the for loop, statement 1 <code>i = 1</code> requires one unit of the running time, statement 2 <code>i &lt;= n</code> requires n+1 units of the running time,
statement 3 <code>i ++</code> requires n units of the runningn time,
and <code>sum = sum + i</code> requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3.  In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / θ(n).</p>
<p>When the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication.
<img alt="High Precision Multiplication and Karatsuba Multiplication example" loading="lazy" src="/Hand_write_note/IMG_2181.jpeg">
There are two methods to convert T(n) into O(n)</p>
<ol>
<li>Recursion tree method
<img alt="Recursion tree method" loading="lazy" src="/Hand_write_note/IMG_2183.jpeg"></li>
<li>According to Recursion tree method, we derive master theorem
<img alt="Master Theorem" loading="lazy" src="/Hand_write_note/IMG_2184.jpeg"></li>
</ol>
<p>The time complexity of multiplication is equal to the time complexity of division</p>
]]></content:encoded>
    </item>
    <item>
      <title>My Homelab</title>
      <link>http://localhost:1313/posts/homeserver/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/homeserver/</guid>
      <description>&lt;p&gt;This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;The machine model is &lt;code&gt;HP-Elitedesk-800-G4-SFF&lt;/code&gt;. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/TechStuff/serverbill.png&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.</p>
<h1 id="overview">Overview</h1>
<p>The machine model is <code>HP-Elitedesk-800-G4-SFF</code>. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.<br>
<img loading="lazy" src="/TechStuff/serverbill.png"></p>
<blockquote>
<p>If you want to learn more here is the machine datasheet:<a href="/server_datasheet.pdf">server_datasheet</a></p></blockquote>
<h1 id="hardware">Hardware</h1>
<ul>
<li>Motherboard: Q370
<ul>
<li><a href="/server_motherboard.pdf">viewer</a></li>
</ul>
</li>
<li>CPU: i5-8500</li>
<li>GPU: intel UHD 630</li>
<li>RAM: 16G</li>
<li>SSD:  256G</li>
<li>HDD: 500G * 1</li>
</ul>
<p>The motherboard provides a high flexibility to expand more internal storage, also it has 4 PCie expansion slots which can used to expand more storage space or other components you want.</p>
<h1 id="software">Software</h1>
<p>nextcloud<br>
email domain<br>
gitlab<br>
minecraft server<br>
docker<br>
jellyin<br>
synthing<br>
proxy?router?gateway?<br>
virtual machine</p>
<p>I host my server with <strong>ubuntu server</strong> distro. The reason I didn&rsquo;t choose proxmox is because I want to learn server step by step,
proxmox is great in visualization, maybe in the future, I will try it.</p>
<p>Durign the process of configuring storage, I learned <strong>LVM</strong>, which is a wonderful tool for those users that has multiple drives. User can create a storage pool called volume group.
Firstly, user add their physical volumes into volumn group, and we create logical volumn based on the storage area had in volumn groups, and then we mount those LVs with the actural dirctory.
It seems like Windows is not able to achieve this function. For <strong>RAID</strong>, we seperate it into 4 different categories, radi0, raid1, raid5 and raid10. This tools shows how to save files in different number of drives or in LVM.</p>
<p>For external access, I plan to use cloudflare tunnel. They provide such service, I need to buy a domain name and combine it with the cloudflare tunnel, and when I access the server, I firstly type the domain name in my browser
to ask cloudflare, and they will guide me to the tunnel to my server, also in server end, I need to install cloudflared docker image as an end, then it works! It&rsquo;s so convenient for those people who live in school accommodation.
And it&rsquo;s totally free!</p>
<p>In my network configuration. I didn&rsquo;t install a router, but the best choice is to use a router for all devices in my home, and assign each of them an static IP address.
To access the server, I bought a portable monitor, since the IP address of my server using DHCP, which required to check the IP address manually when the machine
reboot or close. This issue will be solved easily when I have a router. Nowadays, I need to change the tunnels configuration to enable external access.</p>
<p>since I have 3 different operating systems in my three daily devices, phone for android, laptop for arachlinux and ipad for ipados, I installed nextcloud docker to try to integrate them into one ecosystem, that pretty awesome.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ambitious Cross-Platform Dream: JVM&#39;s Achievements and Limitations</title>
      <link>http://localhost:1313/posts/jvm/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jvm/</guid>
      <description>&lt;p&gt;This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn&amp;rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: &amp;ldquo;Write Once, Run Anywhere.&amp;rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let&amp;rsquo;s have a look about how JVM works.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn&rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.</p>
<blockquote>
<p>In 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: &ldquo;Write Once, Run Anywhere.&rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let&rsquo;s have a look about how JVM works.</p></blockquote>
<h2 id="how-the-jvm-works">How the JVM works</h2>
<p>The JVM executes er programs in several stages:</p>
<ol>
<li>
<p>Compilation: Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).</p>
</li>
<li>
<p>Class Loading: The JVM loads compiled bytecode when required.</p>
</li>
<li>
<p>Bytecode Verification: Ensures security and correctness before execution.</p>
</li>
<li>
<p>Execution: The JVM interprets or compiles bytecode using Just-In-Time (JIT) compilation.</p>
</li>
<li>
<p>Garbage Collection: The JVM automatically manages memory, reclaiming unused objects.</p>
</li>
</ol>
<h2 id="class-loader">Class loader</h2>
<p>One of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.</p>
<p>Let&rsquo;s explore this concept with an example:   <br>
Imagine you&rsquo;re watching a movie on a streaming service.</p>
<ul>
<li>Loading:<br>
The service first finds and imports the movie data you want to watch. Similarly, the class loader locates the binary data for a Java class.</li>
<li>Linking:
<ul>
<li>Verification: Before you watch the movie, the service checks that the file isn&rsquo;t corrupted. In Java, the class loader verifies the correctness of the class.</li>
<li>Preparation: The service sets up the necessary space in memory to buffer the movie. Java allocates memory for variables and sets default values.</li>
<li>Resolution: The service ensures all necessary subtitles or audio tracks are ready to play. Java resolves references to make them direct.</li>
</ul>
</li>
<li>Initialization:<br>
As you start watching, the service begins playing the movie. Similarly, Java runs code to set up variables with their starting values.</li>
</ul>
<p>Class Loader Types:</p>
<ul>
<li>Bootstrap Class Loader: Like the service&rsquo;s core library of well-known movies, it loads fundamental, trusted classes.</li>
<li>Extension Class Loader: Similar to special add-on features, it loads additional classes outside the core library.</li>
<li>System/Application Class Loader: Like searching for new releases or user-uploaded content, it loads classes specific to the application you’re using.</li>
</ul>
<h2 id="virtual-machine-architecture">Virtual machine architecture</h2>
<p><img loading="lazy" src="/TechStuff/JvmSpec7.png"></p>
<h2 id="cross-platform-compatibility-and-limitations">Cross-Platform Compatibility and Limitations</h2>
<p>The JVM abstracts away the underlying hardware and operating system specifics, allowing Java bytecode to run on any device equipped with a compatible JVM. This cross-platform capability greatly simplified software distribution and development, as developers could write code once and deploy it across various platforms without modification.</p>
<p>Despite its strong cross-platform capabilities, the JVM faced significant challenges due to competitive corporate strategies, particularly the &ldquo;Embrace, Extend, and Extinguish&rdquo; (EEE) approach adopted by some companies like Microsoft in the late 1990s. This strategy involved embracing a technology, extending it with proprietary features, and eventually using those extensions to undermine the original technology.</p>
<p>Microsoft initially embraced Java by integrating it into their Internet Explorer browser and Windows platforms. However, they extended Java with proprietary features that were specific to Windows, creating a version of Java that was incompatible with the standard JVM specifications set by Sun Microsystems. This move fragmented the Java platform and undermined the &ldquo;Write Once, Run Anywhere&rdquo; philosophy.</p>
<p>With the development and rise of programming languages like Swift, Kotlin, and JavaScript, the JVM faced significant challenges in maintaining its performance edge. Swift, designed by Apple for iOS and macOS platforms, offers high performance and safety due to its compiled nature and modern language features. Kotlin, although initially running on the JVM, introduced concise syntax and advanced features that surpassed Java in many ways, leading it to become the preferred language for Android development. JavaScript&rsquo;s performance greatly improved with engines like V8, and its versatility expanded through technologies like Node.js for server-side development. These languages not only matched but often exceeded the JVM&rsquo;s performance and adaptability in their respective domains, leading to a shift in developer preferences and a relative decline in the JVM&rsquo;s dominance.</p>
<h2 id="overall">Overall</h2>
<p>Nowadays, Java has become to a normal programming lauguage. And the question is obvious solved. Python has its own interpreter to transfer the source code into machine code. Haskell has its own compiler, C++/C are compiled directly into machine code. However,they can&rsquo;t generate a compiled file that enable to run in every operating system. If there is no EEE strategy, Linux may have a stronger effects in today&rsquo;s world.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
