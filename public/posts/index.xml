<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Kingjin.io</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Kingjin.io</description>
    <generator>Hugo -- 0.149.1</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lightroom Notes</title>
      <link>http://localhost:1313/posts/lightroom/</link>
      <pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lightroom/</guid>
      <description>&lt;p&gt;I really love the feeling about using photo to represent some themes. Recently, I tried lightroom, which is a post-process software for photos. I learned many color theorys and tools behind it. Let&amp;rsquo;s have a look.&lt;/p&gt;
&lt;h2 id=&#34;color-theory&#34;&gt;Color Theory.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Additive Color: RGB for Red, Green and Blue.
&lt;ul&gt;
&lt;li&gt;Red + Green + Blue = White&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Subtractive Color: These are created by mixing two additive colors.
&lt;ul&gt;
&lt;li&gt;Red + Green = Yellow&lt;/li&gt;
&lt;li&gt;Green + Blue = Cyan&lt;/li&gt;
&lt;li&gt;Red + Blue = Magenta&lt;/li&gt;
&lt;li&gt;Yellow + Cyan + Magenta = Black&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Histogram: a graph that displays the brightness and color distribution of an image
&lt;ol&gt;
&lt;li&gt;From left to right, each column represents the number of the white-black pixels in different level&lt;/li&gt;
&lt;li&gt;It has five different region, from left to right, they are blacks, shadows, exposure, highlights and whites.&lt;/li&gt;
&lt;li&gt;There are two triangles at the top left and top right.
&lt;ol&gt;
&lt;li&gt;the top left one is shadow clipping which will show you whether your image has region that was too dark&lt;/li&gt;
&lt;li&gt;the top right one is highlight clipping which show you whether your image has region that was too light&lt;/li&gt;
&lt;li&gt;the reason using clipping is because we can&amp;rsquo;t represent a value of a pixel by the number of bits. For example, the most common bit to represent image is 8 bits(0-255), such as (0，128， 254). When the value over 255 or less than 0, the pixel will be break, and the information will be clipped to 255 and 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;There are several colors in the triangle
&lt;ol&gt;
&lt;li&gt;gray - all details are well preserved&lt;/li&gt;
&lt;li&gt;red - red channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;green - green channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;blue - blue channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;yellow - yellow channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;cyan - cyan channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;magenta - magenta channel overexposure/underexposure&lt;/li&gt;
&lt;li&gt;solid white - RGB channel channel overexposure/underexposure in the same time&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;White balance
&lt;ol&gt;
&lt;li&gt;Temperature&lt;/li&gt;
&lt;li&gt;Tint&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Tone
&lt;ol&gt;
&lt;li&gt;Exposure: change the overall brightness of the photo&lt;/li&gt;
&lt;li&gt;Contrast: Increase or decrease the difference between highlights and shadows in a photo. It can make highlights brighter and shadows darker or vice versa.&lt;/li&gt;
&lt;li&gt;Highlights: Only the brighter areas in the photo are controlled, excluding the brightest pure white areas, such as cloud details in the sky, hightlights on the skins, etc.&lt;/li&gt;
&lt;li&gt;Shadows: Only the darker areas in the photo, but does not include the darkest pure black parts, such as the details of people in the shadows, the dark parts of buildings, etc.&lt;/li&gt;
&lt;li&gt;Whites: Define the brightest point in photo, it controls the rightmost end of the brightness range and determines which parts of your image become pure white.&lt;/li&gt;
&lt;li&gt;Blacks: Define the &amp;ldquo;darkest point&amp;rdquo; or &amp;ldquo;black point&amp;rdquo; of your photo. It controls the leftmost end of the brightness range and determines which parts of the image will become pure black.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Presence
&lt;ol&gt;
&lt;li&gt;Texture: Focus on the surface texture, such as skin pores, surface of rocks, etc.&lt;/li&gt;
&lt;li&gt;Clarity: 它不像“纹理”那么精细，而是让物体的轮廓和结构显得更“硬朗”或更“柔和”。It isn&amp;rsquo;t as fine-detailed as &amp;ldquo;Texture&amp;rdquo;. Instead, it makes the outlines and structures of objects appear &amp;ldquo;harder&amp;rdquo; or &amp;ldquo;softer&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Dehaze: 主要用于消除照片中的大气薄雾、雾霾或朦胧感，同时增加色彩的饱和度。It is primarily used to eliminate atmospheric haze, smog, or mist in a photo, while simultaneously increasing color saturation.&lt;/li&gt;
&lt;li&gt;Vibrance: 它会优先提升画面中本身不太饱和的颜色（比如天空的蓝色、植物的绿色），而对于已经很饱和的颜色则影响较小. It selectively boosts the less saturated colors in an image (like the blue in the sky or the green in plants), while having a smaller impact on colors that are already highly saturated.&lt;/li&gt;
&lt;li&gt;Saturation: 一个“简单粗暴的”色彩增强工具。它会对画面中的所有颜色进行无差别的、同等程度的提升。A &amp;ldquo;simple and heavy-handed&amp;rdquo; color enhancement tool. It boosts all colors in the image indiscriminately and to the same degree.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tone-curve&#34;&gt;Tone Curve&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The square graph looks similar with histogram, but contain a line segment from bottom left to top right.&lt;/li&gt;
&lt;li&gt;We can pull the curve to change tone in specific region, pull the curve left and up will make region lighter(add more RGB) and right down make region darker(add more CMYK) for point curve.&lt;/li&gt;
&lt;li&gt;we can also pull RGB channel separately.&lt;/li&gt;
&lt;li&gt;S curve to increase contrast&lt;/li&gt;
&lt;li&gt;Tips: e.g. to increase Yellow, we can pull the blue-yellow curve to yellow more, or we can pull red-cyan to red more and green-magenta to green more.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This post will update frequently.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I really love the feeling about using photo to represent some themes. Recently, I tried lightroom, which is a post-process software for photos. I learned many color theorys and tools behind it. Let&rsquo;s have a look.</p>
<h2 id="color-theory">Color Theory.</h2>
<ol>
<li>Additive Color: RGB for Red, Green and Blue.
<ul>
<li>Red + Green + Blue = White</li>
</ul>
</li>
<li>Subtractive Color: These are created by mixing two additive colors.
<ul>
<li>Red + Green = Yellow</li>
<li>Green + Blue = Cyan</li>
<li>Red + Blue = Magenta</li>
<li>Yellow + Cyan + Magenta = Black</li>
</ul>
</li>
</ol>
<h2 id="basics">Basics</h2>
<ol>
<li>Histogram: a graph that displays the brightness and color distribution of an image
<ol>
<li>From left to right, each column represents the number of the white-black pixels in different level</li>
<li>It has five different region, from left to right, they are blacks, shadows, exposure, highlights and whites.</li>
<li>There are two triangles at the top left and top right.
<ol>
<li>the top left one is shadow clipping which will show you whether your image has region that was too dark</li>
<li>the top right one is highlight clipping which show you whether your image has region that was too light</li>
<li>the reason using clipping is because we can&rsquo;t represent a value of a pixel by the number of bits. For example, the most common bit to represent image is 8 bits(0-255), such as (0，128， 254). When the value over 255 or less than 0, the pixel will be break, and the information will be clipped to 255 and 0.</li>
</ol>
</li>
<li>There are several colors in the triangle
<ol>
<li>gray - all details are well preserved</li>
<li>red - red channel overexposure/underexposure</li>
<li>green - green channel overexposure/underexposure</li>
<li>blue - blue channel overexposure/underexposure</li>
<li>yellow - yellow channel overexposure/underexposure</li>
<li>cyan - cyan channel overexposure/underexposure</li>
<li>magenta - magenta channel overexposure/underexposure</li>
<li>solid white - RGB channel channel overexposure/underexposure in the same time</li>
</ol>
</li>
</ol>
</li>
<li>White balance
<ol>
<li>Temperature</li>
<li>Tint</li>
</ol>
</li>
<li>Tone
<ol>
<li>Exposure: change the overall brightness of the photo</li>
<li>Contrast: Increase or decrease the difference between highlights and shadows in a photo. It can make highlights brighter and shadows darker or vice versa.</li>
<li>Highlights: Only the brighter areas in the photo are controlled, excluding the brightest pure white areas, such as cloud details in the sky, hightlights on the skins, etc.</li>
<li>Shadows: Only the darker areas in the photo, but does not include the darkest pure black parts, such as the details of people in the shadows, the dark parts of buildings, etc.</li>
<li>Whites: Define the brightest point in photo, it controls the rightmost end of the brightness range and determines which parts of your image become pure white.</li>
<li>Blacks: Define the &ldquo;darkest point&rdquo; or &ldquo;black point&rdquo; of your photo. It controls the leftmost end of the brightness range and determines which parts of the image will become pure black.</li>
</ol>
</li>
<li>Presence
<ol>
<li>Texture: Focus on the surface texture, such as skin pores, surface of rocks, etc.</li>
<li>Clarity: 它不像“纹理”那么精细，而是让物体的轮廓和结构显得更“硬朗”或更“柔和”。It isn&rsquo;t as fine-detailed as &ldquo;Texture&rdquo;. Instead, it makes the outlines and structures of objects appear &ldquo;harder&rdquo; or &ldquo;softer&rdquo;.</li>
<li>Dehaze: 主要用于消除照片中的大气薄雾、雾霾或朦胧感，同时增加色彩的饱和度。It is primarily used to eliminate atmospheric haze, smog, or mist in a photo, while simultaneously increasing color saturation.</li>
<li>Vibrance: 它会优先提升画面中本身不太饱和的颜色（比如天空的蓝色、植物的绿色），而对于已经很饱和的颜色则影响较小. It selectively boosts the less saturated colors in an image (like the blue in the sky or the green in plants), while having a smaller impact on colors that are already highly saturated.</li>
<li>Saturation: 一个“简单粗暴的”色彩增强工具。它会对画面中的所有颜色进行无差别的、同等程度的提升。A &ldquo;simple and heavy-handed&rdquo; color enhancement tool. It boosts all colors in the image indiscriminately and to the same degree.</li>
</ol>
</li>
</ol>
<h2 id="tone-curve">Tone Curve</h2>
<ol>
<li>The square graph looks similar with histogram, but contain a line segment from bottom left to top right.</li>
<li>We can pull the curve to change tone in specific region, pull the curve left and up will make region lighter(add more RGB) and right down make region darker(add more CMYK) for point curve.</li>
<li>we can also pull RGB channel separately.</li>
<li>S curve to increase contrast</li>
<li>Tips: e.g. to increase Yellow, we can pull the blue-yellow curve to yellow more, or we can pull red-cyan to red more and green-magenta to green more.</li>
</ol>
<p>This post will update frequently.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Virtual machine vs Container vs Sandbox</title>
      <link>http://localhost:1313/posts/container_sandbox_vm/</link>
      <pubDate>Mon, 14 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/container_sandbox_vm/</guid>
      <description>&lt;p&gt;Recently, I tried Distrobox, a tool that enables us to run different operating systems within the host OS. I&amp;rsquo;ve noticed it&amp;rsquo;s different from a virtual machine, as it uses containerization instead. Over the past year, I&amp;rsquo;ve heard a lot about containers (like Docker), sandboxes, and virtual machines, and I&amp;rsquo;d like to understand the distinctions between them.
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/Interesting_thing/distrobox.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;virtualization&#34;&gt;Virtualization&lt;/h2&gt;
&lt;h4 id=&#34;how-virtualization-work&#34;&gt;How virtualization work&lt;/h4&gt;
&lt;p&gt;Virtualization is the technology that allows a single physical machine, known as the &lt;strong&gt;host&lt;/strong&gt;, to run multiple virtual machines or &lt;strong&gt;guests&lt;/strong&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Recently, I tried Distrobox, a tool that enables us to run different operating systems within the host OS. I&rsquo;ve noticed it&rsquo;s different from a virtual machine, as it uses containerization instead. Over the past year, I&rsquo;ve heard a lot about containers (like Docker), sandboxes, and virtual machines, and I&rsquo;d like to understand the distinctions between them.
<img loading="lazy" src="/Interesting_thing/distrobox.png"></p>
<h2 id="virtualization">Virtualization</h2>
<h4 id="how-virtualization-work">How virtualization work</h4>
<p>Virtualization is the technology that allows a single physical machine, known as the <strong>host</strong>, to run multiple virtual machines or <strong>guests</strong>.</p>
<p>The key of virtualization is hypervisor. It&rsquo;s the software that create and manages the virtual machines.</p>
<ul>
<li>Type 1 (Bare-Metal): This hypervisor is installed directly onto the host&rsquo;s hardware, acting as the operating system itself. Examples include VMware vSphere, Hyper-V. This type is common in data centers due to its high performance and efficiency</li>
<li>Type 2 (Hosted): This hypervisor runs as an application on top of a conventional operating system(Like Windows, Linux). Examples include VMware Workstaion and Oracle VirtualBox. This approach is often used for desktop virtualization and development purposes.</li>
</ul>
<p>Once the hypervisor is in place, you can create one or more VMs. This involves</p>
<ul>
<li>Allocating resources(CPU cores, RAM, storage)</li>
<li>Configuring virtual hardware(virtual network adapter, virtual storage controllers, virtual BIOS)</li>
<li>Installing a guest OS, the guest os is unaware that it&rsquo;s running in a virtualized environment.
<img alt="virtualization mechanism graph" loading="lazy" src="/Hand_write_note/virtualization.png"></li>
</ul>
<h4 id="how-wsl-work">How WSL work:</h4>
<ul>
<li>WSL 1: It did not run a real Linux kernel. Instead, it functioned as a real-time translation layer. It tricked Linux binaries into thinking they were communicating with a Linux kernel, when in reality, they were talking to a clever interpreter connected to the Windows kernel.</li>
<li>WSL 2: Due to the limitations of translating every single Linux syscall, WSL 2 uses a lightweight, highly optimized type 1 virtual machine.</li>
</ul>
<h4 id="use-case">Use case</h4>
<ol>
<li>Server consolidation and optimization</li>
<li>Development and testing envionments</li>
<li>Application isolation and legacy application support</li>
</ol>
<h4 id="pros-and-cons">Pros and Cons</h4>
<p>Pros:</p>
<ol>
<li>Strong isolation</li>
<li>Total compatibility</li>
</ol>
<p>Cons:</p>
<ol>
<li>Heavyweight and slow</li>
<li>Inefficient</li>
</ol>
<h2 id="containerization">Containerization</h2>
<p>Containerization works by virtualizing the operating system, allowing an application to run in an isolated user space with all its dependencies, code and libraries. It all runs on a single host operating system and shared host OS&rsquo;s kernel, making containers incredibly lightweight and fast.</p>
<h4 id="how-containers-work">How containers work</h4>
<p>Containers work by creating isolated environments for applications using two key technologies built into the host OS&rsquo;s kernel:</p>
<ol>
<li>Namespaces: This feature provides isolation. Each container gets its own isolated view of resources like the network stack, process IDs, and filesystem mounts. This prevents conbtainers from seeing or interacting with each other or the host system.</li>
<li>Control Groups(cgroups): This feature manages resource allocation. It limits and monitors how much of the host&rsquo;s physical resources, such as CPU, RAM, I/O, each container can consume. This ensures no single container can monopolize the host&rsquo;s resources.</li>
</ol>
<h4 id="how-container-engine-work">How container engine work</h4>
<ul>
<li>Rule: A tool to create, run and manage container. It&rsquo;s the translator/project manager between user and host&rsquo;s OS kernel.</li>
<li>Workflow:
<ul>
<li>Creating a Dockerfile: A developer creates a text file defining all the steps required to build the application environment.</li>
<li>Building an Image: The container engine reads the Dockerfile and packages it into a single, read-only, standardized image. This image serves as a static template for the container.</li>
<li>Running a Container: The container engine uses this image to launch one or more container instances. During runtime, it creates an isolated namespace cgroups, while also adding a writable layer on top of the image to make the applications runnable.</li>
</ul>
</li>
</ul>
<p><img alt="container_graph" loading="lazy" src="/Hand_write_note/containerization.png"></p>
<h4 id="docker-vs-kubernetes-vs-podman">Docker vs Kubernetes vs Podman</h4>
<p>These are container enginers, but they serve very different purposes.</p>
<ul>
<li>Docker: The industry standard, it provides an all-in-one platform that includes a daemon, a client and an image registry(Docker hub). It&rsquo;s easy to get started with and has a mature ecosystem</li>
<li>Podman: A more security, daemonless alternative. Its command line is highly compatible with Docker&rsquo;s, its run as a non-root user by default, and its architecture is more streamlined.</li>
<li>Kubernetes: When applications scale up and need to run across hundreds or thousands of containers and multiple servers, Kubernetes is needed. It is a container orchestrator and servers as the brain of a container cluster. Kubernetes is not responsible for the actual running of containers. Instead, it handles higher-level management tasks such as automated deployment, elastic scaling, service discovery, load balancing and self healing.</li>
</ul>
<h4 id="how-distrobox-works">How distrobox works</h4>
<p>Distrobox is a clever tool that uses a container negine like Podman to create tightly integrated development environments. Its main purpose is to let you run any Linux distribution inside a container on your host OS but make it feel completely native.</p>
<h4 id="use-case-1">Use case</h4>
<ol>
<li>Breaking down large, monolithic applications into smaller, independently deployable services</li>
<li>Creating consistent and reproducible environments for building, testing and deploying software.</li>
</ol>
<h4 id="pros-and-cons-1">Pros and Cons</h4>
<p>Pros</p>
<ol>
<li>Lightweight and fast</li>
<li>Highly portable</li>
</ol>
<p>Cons</p>
<ol>
<li>Weaker isolation</li>
<li>You can only run containers that are compatible with the host OS kernel.</li>
</ol>
<h2 id="sandbox">Sandbox</h2>
<p>A sandbox is a secure, isolated environment on a computer where you can run untrusted program without risking harm to your host system.</p>
<h4 id="how-to-create-a-sandbox">How to create a sandbox</h4>
<ol>
<li>Container</li>
<li>Virtual machine</li>
<li>Using dedicated sandbox software(like Sandboxie-Plus)</li>
</ol>
<h4 id="use-case-2">Use case</h4>
<ol>
<li>To be listed on the App Store or Google play store, and application must run in a sandbox. That&rsquo;s why when we open a new app, the user have t approve a list of resources that enable the app to access.</li>
<li>Education</li>
<li>Browser plugin</li>
</ol>
<h4 id="pros-and-cons-2">Pros and Cons</h4>
<p>Pros</p>
<ol>
<li>Extremely lightweight  and fast: A sandbox applies rules to an already running process, adding minimal overhead. It&rsquo;s instantaneous</li>
<li>Targeted security: It&rsquo;s perfect for its narrow purpose: running a single untrusted application and preventing it from accessing your personal files, network or hardware.</li>
</ol>
<p>Cons</p>
<ol>
<li>Weakest Isolation: It shares the host OS and kernel.</li>
<li>Limited scape: It&rsquo;s purely a security feature, not a deployment or development tool.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Some Python Notes | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek5/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek5/</guid>
      <description>&lt;h2 id=&#34;the-global-interpreter-lock-gil&#34;&gt;The Global Interpreter Lock (GIL)&lt;/h2&gt;
&lt;p&gt;At its core, the Global Interpreter Lock, or GIL, is a lock that only allows one thread to execute Python bytecode at a time within a single process. This means that even on a multi-core processor, a standard Python program with multiple threads will only utilize a single core for executing Python code.
It is also for compatibility with large number extension modules written in C. These C extensions may not have built-in thread safety mechanisms, so GIL provides a safety net to ensure that they are executed in a single-threaded environment.
The primary reason for the GIL&amp;rsquo;s existence lies in Python&amp;rsquo;s memory management.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="the-global-interpreter-lock-gil">The Global Interpreter Lock (GIL)</h2>
<p>At its core, the Global Interpreter Lock, or GIL, is a lock that only allows one thread to execute Python bytecode at a time within a single process. This means that even on a multi-core processor, a standard Python program with multiple threads will only utilize a single core for executing Python code.
It is also for compatibility with large number extension modules written in C. These C extensions may not have built-in thread safety mechanisms, so GIL provides a safety net to ensure that they are executed in a single-threaded environment.
The primary reason for the GIL&rsquo;s existence lies in Python&rsquo;s memory management.</p>
<h2 id="pythons-memory-management">Python&rsquo;s Memory Management</h2>
<p>Python uses a system called automatic memory management. Each object in Python has a reference count, which is a number that keeps track of how many variables or other object refer to it. When you assign a variable to an object, its reference count increases by one. When a reference is removed (for instance, when a variable goes out of scope), the count decreases. Once an object&rsquo;s reference count drops to zero, it means nothing is using it.</p>
<p>This is where GIL becomes important. In a multi-threaded program, multiple threads could try to increase or decrease the same object&rsquo;s reference count simultaneously, which may cause memory leaks.</p>
<h2 id="python-313">Python 3.13</h2>
<p>GIL has become a bottleneck for CPU program performance, by reconstruct python, the development team has made a groundbreaking change in Python 3.13: the ability to disable the GIL.</p>
<h2 id="why-python-slow">Why python slow</h2>
<ol>
<li>GIL</li>
<li>Dynamic Datatype.</li>
<li>It&rsquo;s an interpreter language</li>
<li>Easy to read makes python very abstract</li>
</ol>
<h2 id="trivias">Trivias</h2>
<ol>
<li>Generating functions are a powerful mathematical tool that transform discrete sequences into algebraic functions, enabling us to solve complex combinatorial counting problems through function operations.</li>
<li>GPOS vs RTOS
<ol>
<li>General purpose operating systems like Windows, macOS, and Linux are designed to provide a versatile, user-friendly computing environment. They prioritize overall system efficiency, with more flexible restrictions on task response times.</li>
<li>Real time operating systems such as VxWorks, focus on strict time limitations for individual tasks, ensuring predictable and deterministic responses. These systems are typically used in environments demanding high reliability and precise time control, featuring a smaller, more streamlined kernel that guarantees real-time performance.</li>
</ol>
</li>
<li>In python, Boolean type is essentially a subclass of the integer type, True == 1 and False == 0. This design is mainly due to historical reasons and pragmatic considerations. In early version of Python(before 2.3), there was no dedicated bool type, and people used integers 1 and 0 to represent true and false. When the bool type was introuced, in order to allow old code to continue to run seamlessly, it was the best choice to continue to design it as a subclass of int.
<code>True + 1 = 2, False * 1 = 0</code></li>
<li>Huffman coding, an algorithm to compress data losslessly. Huffman coding assigns variable-length binary codes to input symbols.
<ul>
<li>More frequent symbols -&gt; shorter codes</li>
<li>Less frequent symbols -&gt; longer codes</li>
</ul>
</li>
<li>Windows vs Linux
<table>
  <thead>
      <tr>
          <th>Aspect</th>
          <th>Linux</th>
          <th>Windows</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>System Usage</strong></td>
          <td>Lightweight, minimal background processes</td>
          <td>Heavy, many preloaded services and features</td>
      </tr>
      <tr>
          <td><strong>Bloatware</strong></td>
          <td>No pre-installed junk, user chooses all</td>
          <td>Comes with many default apps and features</td>
      </tr>
      <tr>
          <td><strong>Transparency</strong></td>
          <td>Fully open, config files are plain text</td>
          <td>Many hidden processes, registry-based config</td>
      </tr>
      <tr>
          <td><strong>Customizability</strong></td>
          <td>Highly customizable, from kernel to GUI</td>
          <td>Limited customization without hacking</td>
      </tr>
      <tr>
          <td><strong>Privacy &amp; Security</strong></td>
          <td>User-controlled, minimal telemetry</td>
          <td>Sends telemetry, often needs antivirus</td>
      </tr>
      <tr>
          <td><strong>Software Support</strong></td>
          <td>Great for dev tools, less for gaming</td>
          <td>Excellent app/game compatibility</td>
      </tr>
      <tr>
          <td><strong>System Control</strong></td>
          <td>Full control over system and services</td>
          <td>Some restrictions, frequent auto-updates</td>
      </tr>
      <tr>
          <td><strong>Hardware Support</strong></td>
          <td>Good but sometimes manual setup required</td>
          <td>Plug-and-play for most consumer hardware</td>
      </tr>
  </tbody>
</table>
</li>
</ol>
<h2 id="resouces">Resouces</h2>
<ol>
<li>Why the formular of normal distribution has a pi:<a href="https://www.youtube.com/results?search_query=normal+distrubution+in+astronomy">explain from 3b1b</a></li>
</ol>
<h2 id="talks">Talks</h2>
<p>漫士！</p>
<iframe width=100% height=475  src="https://www.youtube.com/embed/nBkr4u_xKms?si=6CY9MwRS2KIN2mzr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>]]></content:encoded>
    </item>
    <item>
      <title>Bitcoin Basic | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek4/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek4/</guid>
      <description>&lt;h2 id=&#34;bitcoin&#34;&gt;Bitcoin&lt;/h2&gt;
&lt;p&gt;The legend of Bitcoin has shown its magic for a long time. Recently, I have started to explore this field, and this is a record of my learning.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-blockchain&#34;&gt;The Blockchain⛓️&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;blockchain&lt;/strong&gt; is the foundational technology of Bitcoin. Think of it as a public, digital ledger or receipt book that is shared across thousands of computers worldwide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s a Chain of Blocks:&lt;/strong&gt; Each &amp;ldquo;block&amp;rdquo; contains a list of recent transactions. When a new block is created, it is cryptographically linked to the previous one, forming an unbroken chain leading all the way back to the very first block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&amp;rsquo;s Immutable:&lt;/strong&gt; Because each block is linked to the one before it, changing a transaction in an old block would require re-doing all the work for every single block that came after it. This makes the ledger permanent and tamper-proof. This structure is what proves each coin&amp;rsquo;s history and prevents fraud like double-spending.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-genesis-block&#34;&gt;The Genesis Block📜&lt;/h4&gt;
&lt;p&gt;The very first block, known as the &lt;strong&gt;Genesis Block&lt;/strong&gt;, was mined on &lt;strong&gt;2009.01.04&lt;/strong&gt;, by Bitcoin&amp;rsquo;s mysterious creator, &lt;strong&gt;Satoshi Nakamoto&lt;/strong&gt;. This single block was the start of the entire Bitcoin network. Once it was created, the race to mine the second block began, and the chain has been growing continuously ever since.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="bitcoin">Bitcoin</h2>
<p>The legend of Bitcoin has shown its magic for a long time. Recently, I have started to explore this field, and this is a record of my learning.</p>
<hr>
<h4 id="the-blockchain">The Blockchain⛓️</h4>
<p>The <strong>blockchain</strong> is the foundational technology of Bitcoin. Think of it as a public, digital ledger or receipt book that is shared across thousands of computers worldwide.</p>
<ul>
<li><strong>It&rsquo;s a Chain of Blocks:</strong> Each &ldquo;block&rdquo; contains a list of recent transactions. When a new block is created, it is cryptographically linked to the previous one, forming an unbroken chain leading all the way back to the very first block.</li>
<li><strong>It&rsquo;s Immutable:</strong> Because each block is linked to the one before it, changing a transaction in an old block would require re-doing all the work for every single block that came after it. This makes the ledger permanent and tamper-proof. This structure is what proves each coin&rsquo;s history and prevents fraud like double-spending.</li>
</ul>
<hr>
<h4 id="the-genesis-block">The Genesis Block📜</h4>
<p>The very first block, known as the <strong>Genesis Block</strong>, was mined on <strong>2009.01.04</strong>, by Bitcoin&rsquo;s mysterious creator, <strong>Satoshi Nakamoto</strong>. This single block was the start of the entire Bitcoin network. Once it was created, the race to mine the second block began, and the chain has been growing continuously ever since.</p>
<hr>
<h4 id="mining">Mining⛏️</h4>
<p>Mining is the process of creating new blocks. It&rsquo;s a competitive race that serves two critical purposes:</p>
<ol>
<li><strong>Validating Transactions:</strong> Miners group pending transactions into a new block.</li>
<li><strong>Creating New Bitcoin:</strong> The winner of the race is rewarded with new bitcoin.</li>
</ol>
<p>Here’s how a miner wins the race and proves their block is valid:</p>
<ul>
<li><strong>The Hashing Puzzle:</strong> Miners take the data in their block and use their computers to find a specific number called a <strong>nonce</strong>. When the block data and the nonce are combined and put through a cryptographic function (SHA-256), they produce a unique digital fingerprint called a <strong>hash</strong>.</li>
<li><strong>The &ldquo;Lower Than&rdquo; Rule:</strong> To win, a miner must find a hash that is <strong>lower than the current network &ldquo;target&rdquo;</strong>. This target is a very large number that the entire network agrees on. Finding a hash below this target is incredibly difficult and requires immense computational power—it&rsquo;s like trying to win a global lottery every 10 minutes.</li>
<li><strong>The Reward and The Halving:</strong> The first miner to find a valid hash wins the <strong>block reward</strong>.
<ul>
<li>Initially, the reward was <strong>50 BTC</strong>.</li>
<li>However, this reward is programmed to cut in half roughly every four years (or 210,000 blocks) in an event called the <strong>halving</strong>.</li>
<li>As of the April 2024 halving, the reward is now <strong>3.125 BTC</strong>.</li>
<li>This mechanism controls the supply of new bitcoin, making the currency scarce and ensuring its total amount will never exceed <strong>21 million coins</strong>.</li>
</ul>
</li>
</ul>
<p>When a winning block is found, its hash is broadcast across the P2P network. All other participants quickly verify that the hash is valid. Once confirmed, they add the new block to their copy of the blockchain and immediately start competing to solve the <em>next</em> block.</p>
<hr>
<h4 id="how-to-mine">How to Mine:</h4>
<p>There are a few ways to participate in Bitcoin mining, each with its own pros and cons.</p>
<ul>
<li><strong>Solo Mining:</strong> This is you, on your own, trying to solve a block. If you succeed, you get the <em>entire</em> block reward (3.125 BTC + transaction fees). However, the odds of a single person solving a block today are astronomically low due to the immense competition. It&rsquo;s like buying a single lottery ticket and hoping to win the grand prize.</li>
<li><strong>Mining Pool:</strong> This is the most common method. You join a &ldquo;pool&rdquo; with thousands of other miners, combining your computing power. The pool works together to find blocks much more frequently. When the pool wins, the reward is split among all participants based on how much computing power they contributed. This provides smaller, but much more consistent and predictable, payouts.</li>
</ul>
<hr>
<h4 id="block-forks">Block Forks🍴</h4>
<p>A <strong>fork</strong> happens when the blockchain temporarily or permanently splits into two different paths.</p>
<ul>
<li><strong>Accidental Fork:</strong> Sometimes, two miners find a valid block at almost the exact same time. The network briefly splits as some nodes follow one miner and some follow the other. This is usually resolved within a few minutes when the next block is found and added to one of the chains, making it the &ldquo;longest&rdquo; and therefore the official one. The shorter chain is then abandoned.</li>
<li><strong>Hard Fork:</strong> This is an intentional split that happens when the network&rsquo;s software rules are changed in a way that is not backward-compatible. All participants must upgrade to the new rules to continue. If a significant portion of the community refuses to upgrade, the split becomes permanent, resulting in the creation of a new, separate cryptocurrency (e.g., Bitcoin Cash was created from a hard fork of Bitcoin).</li>
</ul>
<hr>
<h4 id="ethics">Ethics</h4>
<p>Mining bitcoin always consume immense energy, which critics view as a wasteful environmental cost for a seemingly meaningless computation. Proponents argue this mechanism decentralized financial system that offers freedom from the control of banks and governments.</p>
<h4 id="tools">Tools</h4>
<p>Calculate computing performance: <a href="https://www.nicehash.com/profitability-calculator">https://www.nicehash.com/profitability-calculator</a></p>
<blockquote>
<p>This is the computating power of my personal game laptop(one dollar per day hhh)
<img loading="lazy" src="/Interesting_thing/computating_power.png"></p></blockquote>
<h4 id="resources">Resources:</h4>
<p>Youtube channels</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=5hgdekVZb3A&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=3">https://www.youtube.com/watch?v=5hgdekVZb3A&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=3</a></li>
<li><a href="https://www.youtube.com/watch?v=a41DMDfJjsU&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=2">https://www.youtube.com/watch?v=a41DMDfJjsU&amp;list=PL5TbbtexT8T0JbaWR0Zbf-aVm2onpSjHT&amp;index=2</a></li>
<li><a href="https://Gemini.google.com">https://Gemini.google.com</a></li>
</ul>
<h2 id="trivias">Trivias</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Charles_Scott_Sherrington">Sherrington</a>, coined the word &ldquo;synapse&rdquo; to define the connection between two neurons</li>
<li>Two different roads of AI: connectionism and Symbolism.</li>
<li>Hidden layer was firstly been implemented in Boltzmann machine, although Rosenblatt had some idea about multilayer perceptrons, but he didn&rsquo;t find any useful training algorithm.</li>
<li>Restricted Boltzmann machine - each layer is only allowed to be fully connectted to the next layer, current layer nodes are not connectted to each other. The advantages of this machine is it allows to update bodes within the same layer in parallel</li>
<li>The invention of hidden layer allows model to understand abstract features. It also becomes to one of the most significant component in deep learning.</li>
<li>The main difference between the Hopfield Network and the Boltzmann nachine is the presence of hidden layers. Other differences include the fact that the Hopfield network is deterministic, whereas the Boltzmann machine is stochastic, and the defintions of their energy function also differ.</li>
<li>The fovea has many photoreceptors, with a high density of cones(for colors) and nearly no rods(for dark). This structure allows us to see the world clearly. If you develop myopia, the image formed after light is reflected by the eye may not be focused directly on the fovea.</li>
<li>The idea of CNN was mainly inspired by the HMAX model(hierarchical, pooling, convolution), and the HMAX model was proposed by Tomaso Poggio, to simulate primate visual system, specifically ventral stream.</li>
<li>Pytorch for research area, Tensorflow for industry and JAX for high level usage.</li>
<li>Ethereum and ether is not the same as bitcoin. Ethereum has a longer vision, and the number of ether is unlimited.</li>
</ol>
<h2 id="resource">Resource</h2>
<ol>
<li>Documentary of AlphaGo: <a href="https://www.youtube.com/watch?v=WXuK6gekU1Y">https://www.youtube.com/watch?v=WXuK6gekU1Y</a></li>
<li>How to use hugging face: <a href="https://www.youtube.com/watch?v=3kRB2TXewus">https://www.youtube.com/watch?v=3kRB2TXewus</a></li>
<li>This is the most comprehensive guide for AI beginner I had ever seen: <a href="https://www.reddit.com/r/DTU__Delhi/comments/1g0luec/mastering_aiml_in_2024_the_only_resource_guide/">Guide link</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Hopfield Network</title>
      <link>http://localhost:1313/posts/hopfieldnetwork/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hopfieldnetwork/</guid>
      <description>&lt;p&gt;2024 Nobel Physics prize was earned by Professor John Hopfield and Professor Geoffrey Hinton, to thanks their distribution on machine learning.
However, I felt very suprised that why it gives to machine learning? Anyway, I hadn&amp;rsquo;t deeply find the answer in that time.&lt;/p&gt;
&lt;p&gt;Recently, Professor Geoffrey Hinton gived us a short lecture about Boltzmann machine virtually.
And before the lecture, I learned Hopfield Network(the predecessor of Boltzimann machine) at my accommodation.
So today I will record this moment.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>2024 Nobel Physics prize was earned by Professor John Hopfield and Professor Geoffrey Hinton, to thanks their distribution on machine learning.
However, I felt very suprised that why it gives to machine learning? Anyway, I hadn&rsquo;t deeply find the answer in that time.</p>
<p>Recently, Professor Geoffrey Hinton gived us a short lecture about Boltzmann machine virtually.
And before the lecture, I learned Hopfield Network(the predecessor of Boltzimann machine) at my accommodation.
So today I will record this moment.</p>
<p>Hopfield Network was invented at 1982. Processor John Hopfield designed it based on ideas from statistical mechanics.</p>
<p><img alt="metaphor" loading="lazy" src="/Hand_write_note/hopfield_network_metaphor.png">
The graph above shows two states of a ball
From the left part, we can see the energy system of the ball is at the highest, which means the ball is very unstable
From the right part, we can see the ball had already fall into the bottom, which means the ball is very stable.
Although it is a classical physics model, but it definitly explain the main idea of hopfield network.</p>
<p>So now we can say hopfield network is just make a system move from an unstable state to stable state.</p>
<p>If you interested how exactly hopfield network work. See the video below, it&rsquo;s pretty nice.</p>
<iframe width=100% height=475 
src="https://www.youtube.com/embed/1WPJdAW-sFo?start=505" 
title="YouTube video player" 
frameborder="0" 
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
allowfullscreen>
</iframe>
<p>This idea is also useful in today.
In LLM, we can say the user&rsquo;s prompt and question is the most unstable states while the answer is the stable state.</p>
<p>Based on the concept of Hopfield networks, many different architectures had been invented, which makes Connectionism and Deep Learning great again.</p>
<p>After all, I catch the reason why nobel prize gives to physics.</p>
]]></content:encoded>
    </item>
    <item>
      <title>For UNIX Week | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek3/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek3/</guid>
      <description>&lt;h2 id=&#34;book---unix-a-history-and-a-memoir&#34;&gt;Book - Unix: A History and a Memoir&lt;/h2&gt;
&lt;p&gt;Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &amp;ldquo;why&amp;rdquo; questions I had when I learning linux system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AT&amp;amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.&lt;/li&gt;
&lt;li&gt;The system developed before Unix was called Multics.&lt;/li&gt;
&lt;li&gt;Since “Multics” already used “multi,” the early name of Unix was “Unics.”&lt;/li&gt;
&lt;li&gt;Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn’t written for the PDP-10.&lt;/li&gt;
&lt;li&gt;Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.&lt;/li&gt;
&lt;li&gt;Unix eventually declined due to copyright issues. AT&amp;amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.&lt;/li&gt;
&lt;li&gt;GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.&lt;/li&gt;
&lt;li&gt;MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.&lt;/li&gt;
&lt;li&gt;In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.&lt;/li&gt;
&lt;li&gt;MINIX was widely used because it was embedded in Intel chips.&lt;/li&gt;
&lt;li&gt;The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.&lt;/li&gt;
&lt;li&gt;Microsoft once had its 3own Unix-like system.&lt;/li&gt;
&lt;li&gt;Another completely different path from Unix was MS-DOS, which eventually evolved into today’s Windows.&lt;/li&gt;
&lt;li&gt;You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.&lt;/li&gt;
&lt;li&gt;“Everything is a file” is one of the core principles of Unix.&lt;/li&gt;
&lt;li&gt;The KISS principle (“Keep It Simple, Stupid”) is a fundamental part of Unix philosophy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The UNIX philosophy is very similar to some programming concepts I&amp;rsquo;ve recently learned at university. That&amp;rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="book---unix-a-history-and-a-memoir">Book - Unix: A History and a Memoir</h2>
<p>Recently, I read this fantastic book. It bring me back to that 1960s - a period without modern computer and how the most clever minds in this world changed the world.
During the reading, I found many answers to the &ldquo;why&rdquo; questions I had when I learning linux system.</p>
<ol>
<li>AT&amp;T built Bell Labs and invited some of the most brilliant people in the world to do the most advanced scientific work. There was no limit on funding and no fixed goals for individuals.</li>
<li>The system developed before Unix was called Multics.</li>
<li>Since “Multics” already used “multi,” the early name of Unix was “Unics.”</li>
<li>Unix was first written on the PDP-7. The next version, written in C, was developed on the PDP-11. Fortunately, it wasn’t written for the PDP-10.</li>
<li>Tools like the shell, grep, regular expressions, the C language, the C compiler, yacc, lex, make, sed, awk, and troff were all invented at Bell Labs.</li>
<li>Unix eventually declined due to copyright issues. AT&amp;T sold it as a product and made it proprietary, which gave rise to open-source Unix-like systems.</li>
<li>GNU is a Unix-like project that provides free and open-source alternatives. Under the GNU license, if you modify the source code of a project, the modified version must also remain open-source.</li>
<li>MacOS is based on BSD, which is a Unix-like system. The Linux kernel combined with GNU forms GNU/Linux. They both follow POSIX.</li>
<li>In the early days, operating systems were not portable. This changed with the invention of the C language and its compiler.</li>
<li>MINIX was widely used because it was embedded in Intel chips.</li>
<li>The working environment at Bell Labs in the 1970s are of hard problems, brilliant colleagues with shared dreams, and a unique management style that encouraged innovation.</li>
<li>Microsoft once had its 3own Unix-like system.</li>
<li>Another completely different path from Unix was MS-DOS, which eventually evolved into today’s Windows.</li>
<li>You can also get to know the geniuses of that era, like Ken Thompson, Richard Stallman, and Brian Kernighan.</li>
<li>“Everything is a file” is one of the core principles of Unix.</li>
<li>The KISS principle (“Keep It Simple, Stupid”) is a fundamental part of Unix philosophy.</li>
</ol>
<p>The UNIX philosophy is very similar to some programming concepts I&rsquo;ve recently learned at university. That&rsquo;s why, Its impact not only on system desisgn but also software deveopemnt and beyond.</p>
<ol>
<li>Keep it simple stupid</li>
<li>Do one thing, and do it well</li>
<li>Everything is a file</li>
<li>Make each program a filter</li>
<li>Fail loudly</li>
<li>Modularity</li>
<li>Prototyping early</li>
</ol>
<p>In today, many barriers had already been removed.<br>
And I realise.<br>
The revolution of AI is just like the reenactment of Unix&rsquo;s development.<br>
So.<br>
KISS.</p>
<h2 id="trivias">Trivias</h2>
<ol>
<li>tty - TeleTYpewriter, terminal in the old time, before lcd screen been invented.<img src="/TechStuff/Teletype_model_33.jpg" alt="teletype model 33" width="500" height="600"></li>
<li>UNIX was developed on the PDP-7, a computer with no screen, no mouse and only 8KB of RAM. It weighted nearly 500kg. <img alt="pdp7" loading="lazy" src="/TechStuff/Pdp7.jpeg"></li>
<li>UNIX and UNIX-like system use abbreviated commands because typing on TTY terminals in the 1960s was slow and insufficient.</li>
<li>Second-system effect: It believes that after completing a small, elegant, and successful system, people tend to have overly high expectations for the next projects, which may lead to the creation of a huge, feature-rich but monstrous system.The &ldquo;second-system effect&rdquo; can result in software project plans being overdesigned, with too many variables and excessive complexity, ultimately falling short of expectations and leading to failure. such as PL/I in Multics</li>
<li>Fortran(formular translation): The purpose of this lagnauge is to proceed mathematics formular and float number in an efficient way, like integration, linear algebra. That&rsquo;s why fortran is still popular in some supercomputer and scientific calculation.</li>
<li>B lagnauge is designed in a bit-unit computer PCP-7, where C langauge is designed in a byte-unit computer. Therefore the main difference between B and C is B langauge doesn&rsquo;t support types and C does.</li>
<li>Development of Clang: PL/I -&gt; BCPL -&gt; B -&gt; New B(C)</li>
<li>If computers using the same cpu architecture, they will using the same assembly language.<img alt="assembly_langauge_with_architecture" loading="lazy" src="/TechStuff/assembly_langauge_diff.png"></li>
<li>The grep command is used to find lines that match a specific pattern in a file while the sed command is used to insert, replace and delete text from a file. Finally, the awk command supports programming logic and is often used for advanced data processing tasks.</li>
<li>The development of UNIX from 1970 until now. <img alt="road of unix" loading="lazy" src="/TechStuff/roadOfUNIX.png"></li>
</ol>
<h2 id="talks">Talks</h2>
<ol>
<li>&ldquo;A new technological discovery is often discredited by older generations of professionals - especially those with high authority and prestige in the existing field - in order to protect their own status&rdquo;</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Jarvis Will Coming Soon | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek2/</link>
      <pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek2/</guid>
      <description>&lt;h2 id=&#34;model-context-protocol-overview&#34;&gt;Model Context Protocol overview&lt;/h2&gt;
&lt;p&gt;MCP (Model Context Protocol) can be understood as a &amp;ldquo;universal language&amp;rdquo; for communication between AI and external tools. It&amp;rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.&lt;/p&gt;
&lt;h4 id=&#34;why-is-mcp-needed&#34;&gt;Why is MCP needed?&lt;/h4&gt;
&lt;p&gt;In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications × M tools = N×M interfaces).&lt;br&gt;
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
&lt;img alt=&#34;components mcp include&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/TechStuff/mcp.png&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="model-context-protocol-overview">Model Context Protocol overview</h2>
<p>MCP (Model Context Protocol) can be understood as a &ldquo;universal language&rdquo; for communication between AI and external tools. It&rsquo;s like a translator, allowing different AI applications (such as chatbots, code assistants) and different tools (like databases, GitHub, calendars) to easily communicate without needing to develop a new interface every time.</p>
<h4 id="why-is-mcp-needed">Why is MCP needed?</h4>
<p>In the past, if you wanted an AI assistant to access different tools, like a calendar, email, or task manager, you would need to develop a separate interface for each tool (function calling), which resulted in a huge amount of work (N AI applications × M tools = N×M interfaces).<br>
MCP simplifies everything: all AI applications only need to support MCP, and all tools only need to support MCP. This way, they can communicate with each other, reducing development costs (N+M interfaces).
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp.png"></p>
<p>The current components of MCP servers include:
<img alt="components mcp include" loading="lazy" src="/TechStuff/mcp_include.png"></p>
<h4 id="how-does-mcp-work">How does MCP work?</h4>
<p><img alt="how mcp work" loading="lazy" src="/TechStuff/mcp_work.png"></p>
<h4 id="example">Example:</h4>
<p>Suppose you&rsquo;re using an AI assistant to manage your work, and it wants to help you schedule today&rsquo;s meeting:</p>
<ul>
<li>
<p>Without MCP, developers would need to write separate integration code for Outlook, Google Calendar, and Apple Calendar.</p>
</li>
<li>
<p>With MCP, the AI only needs to call the MCP server, which will automatically interface with your calendar system. No matter which calendar service you use, the AI can work seamlessly.</p>
</li>
</ul>
<h4 id="core-functions-of-mcp">Core Functions of MCP:</h4>
<ul>
<li>
<p>Reducing development costs (no need to develop separate integrations for each tool).</p>
</li>
<li>
<p>Enhancing AI&rsquo;s ability to access external data (allowing AI to easily query and manipulate external data).</p>
</li>
<li>
<p>Standardizing communication (making communication between different AI applications and tools smoother).</p>
</li>
</ul>
<p>You can think of MCP as the &ldquo;USB interface for AI&rdquo;—any AI device can plug into different tools without needing to individually adapt to each one!</p>
<hr>
<h2 id="trivias">Trivias:</h2>
<ol>
<li><code>Graph</code> is a great data structure, it can be used to find the shortest path, solve a magic cube.
Rely on this data structure, Human find the shortest steps to solve the worst case configured
<code>3\*3\*3</code> magic cube in <strong>20</strong> steps (which also called god&rsquo;s number) and 11 steps for <code>2\*2\*2</code> one. What about n*n*n, Here is an interesing paper
about time compleixity of solving a n*n*n magic cube: <a href="/Demaine_Algoritms_for_solving.pdf">Algorithms for Solving Rubik’s Cubes</a></li>
<li>Topological sort is an algorithm based on DFS and DAG, It&rsquo;s not a traditional sorting algorithm, like comparing the size of each number and sort them, but sorting based on dependencies.</li>
<li>Dynamic programming is just like recursion + memorization + guessing</li>
<li>P vs NP problems: P is a problem  that can be solved easily by a computer, NP is a problem that you can check for correctness very easily once solved. However, P != NP for example wec can&rsquo;t engineer luck.
Also, NP hard means it is at least as hard as any problem in NP, and NP-complete is lke if you can solve one NP-complete question, you can solve all NP question.
Reduction is like to prove a known NP-complete question, and transfer it into a NP question X, then X is also a NP-complete question</li>
<li>HTTP vs REST API
<ul>
<li>
<p>HTTP is a protocol, and its core task is to define how to request and transfer data between your broswer and server</p>
<ul>
<li>It focuses on the data exchange level, regardless of whether the data is an image, text, video, or API response.</li>
<li>For example, you can use an HTTP request to access a webpage (HTML page) or use an HTTP request to retrieve API data (JSON data). It doesn’t care about what data you&rsquo;re transmitting.</li>
</ul>
</li>
<li>
<p>REST API is a design style, based on the HTTP protocol, with rules and best practices:</p>
<ul>
<li>It views content on the server as &ldquo;resources&rdquo; and specifies how to operate on them using HTTP methods (GET, POST, PUT, DELETE).</li>
<li>REST API design considers resource orientation: Resources (like users, articles, comments, etc.) have unique identifiers (URIs), and clients interact with these resources through HTTP requests.</li>
</ul>
<p>For example, in a REST API, you can:</p>
<ul>
<li>GET request: Retrieve a resource (e.g., get movie information).</li>
<li>POST request: Create a new resource (e.g., submit a new comment).</li>
<li>PUT request: Update a resource (e.g., modify user information).</li>
<li>DELETE request: Delete a resource (e.g., remove an article).</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="resource">Resource:</h2>
<ol>
<li>A tool to build a personal streaming music player: <a href="https://www.navidrome.org/">navidrome</a></li>
<li>A great blog that introduce human visualization: <a href="https://www-sciencedirect-com.eux.idm.oclc.org/science/article/pii/B9780128038130000040#f0015">human visualization</a></li>
<li>Five basic algorithms explanation:
<ul>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp">Dynamic programming</a></li>
<li><a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">Greedy Algorithm</a></li>
<li><a href="https://www.bilibili.com/video/BV1wi4y157er?spm_id_from=333.788.videopod.sections&amp;vd_source=783331b1d88fa190b5ce8305307e0af5">Backtracking</a></li>
<li><a href="https://chatgpt.com/share/67d76084-79f0-8006-8a37-4500841a7b9a">Branch and Bounding</a></li>
</ul>
</li>
<li>This week, Nvidia GTC 2025 brings a lot of new tech, PC in AI age, B300, new architecture, robots.
After watched the coverage keynotes, I was just feel like our mankind is in an special stage with unpredictable pace. In science fiction films, at this point
, it often leads to the arrival of an alien civilization.
<img alt="GTC_2025" loading="lazy" src="https://cdn.mos.cms.futurecdn.net/QQ6ZABoJtLbUEnGLXxz2GT-970-80.png.webp"></li>
<li>A dijkstra algorithm visualiser that helps me understand it: <a href="https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">Dijkstra shortest path</a></li>
<li>MCP explain: <a href="https://www.philschmid.de/mcp-introduction">A blog that explain MCP crystal clear</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Start | King Weekly</title>
      <link>http://localhost:1313/posts/techweekly/techweek1/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/techweekly/techweek1/</guid>
      <description>&lt;h2 id=&#34;email-sending-and-receiving-system&#34;&gt;Email sending and receiving system&lt;/h2&gt;
&lt;p&gt;The main system is build based on three protocols: SMTP, POP3 and IMAP.
&lt;img alt=&#34;process of email system&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/emailsys.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;SMTP is used for sending emails to the recipient’s email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&amp;rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&amp;rsquo;s email server using SMTP as well.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="email-sending-and-receiving-system">Email sending and receiving system</h2>
<p>The main system is build based on three protocols: SMTP, POP3 and IMAP.
<img alt="process of email system" loading="lazy" src="/emailsys.png"></p>
<p>SMTP is used for sending emails to the recipient’s email server, but it does not handle receiving emails.
User1 sends an email via an email client, and the email is first sent to User1&rsquo;s email server using SMTP. Then, the email server forwards it to the recipient&rsquo;s email server using SMTP as well.</p>
<p>POP3 downloads emails from the email server to the email client. By default, it removes emails from the server after downloading, but some email clients allow users to keep copies on the server.
IMAP keeps emails on the server and synchronizes them across multiple devices. The email client initially loads only the headers, and the full email content is fetched from the server when the user opens it.</p>
<p>If you want to customize an email domain. You need to have your own SMTP and IMAP/POP3 server and a domain, the other steps are the same as above.</p>
<hr>
<h2 id="pkgbuild-in-arch-linux">PKGBUILD in Arch Linux</h2>
<p>PKGBUILD is a bash script contain the build information required by archlinux package
we use makepkg script to build the package, it will search PKGBUILD first in the current folder.
<img alt="PKGBUILD process" loading="lazy" src="/Hand_write_note/pkgbuild.jpg">
Benefits:</p>
<ul>
<li>using pacman to manage, user can update and uninstall easily</li>
<li>some pkgbuild file include the commands to generate a binary file and store it in /user/bin</li>
</ul>
<p>Drawbacks:</p>
<ul>
<li>Not friendly to starter</li>
</ul>
<p>Although we can use yay to help us do all these stuff.</p>
<hr>
<h2 id="trivias">Trivias</h2>
<ol>
<li>Newton&rsquo;s method is quadratic convergence when we want to calculate the root of a number</li>
<li>Catalan number is a group of sequence that appear widely in combinatorics. e.g. ways to arrange n brackets, number of triangles in an n+2 convex polygon. The common property of these applications is that they are recursive and have a constrained structure.</li>
<li>Toom cook: It divide a d-digit number into n parts and doing arithmatic calculations.</li>
<li>Schonhage-strassen scheme: It multiplies two integers of length 𝑛 in O (𝑛 log𝑛 log log𝑛) steps on a multitape Turing machine</li>
<li>A Naive algorithm is usually the most obvious solution when one is asked a problem. It may not be a smart algorithm but will probably get the job done</li>
<li>The taste of red wine is determined by acidity, sweetness, alcohol content, tannins, and body. Wines are categorized into New World and Old World. New World wines (from countries like the USA, Chile, Argentina, and China) are named after the grape variety, while Old World wines (mainly from Europe) are named after their place of origin.<br>
Red wine is made by fermenting red grapes with their skins. White wine is made from either white grapes or red grapes without their skins. Rosé wine is made by soaking the grape skins briefly but fermenting without them. Sparkling wine undergoes a second fermentation to produce bubbles.</li>
<li>Gabriel&rsquo;s horn is a type of geometric figure that has infinite surface area but finite volume.</li>
</ol>
<hr>
<h2 id="resources">Resources</h2>
<ol>
<li>Code question(leetcode), system design question(crack the code interview), teamwork, communication are all important in the interview.</li>
<li>An old guideline to learn ai: <a href="https://www.captainai.net/itcoke/">https://www.captainai.net/itcoke/</a></li>
<li>A guideline to learn CS: <a href="https://csdiy.wiki/%E5%90%8E%E8%AE%B0/">https://csdiy.wiki/后记/</a></li>
<li>Useful tips to integrate by parts, 反对幂指三, to choose u.</li>
<li>Customize your zsh: <a href="https://ohmyz.sh">oh my zsh</a></li>
<li>Xiaomi releases a concept modular camera, it looks pretty awesome and innovative.
<img loading="lazy" src="/Interesting_thing/Xiaomi_modular_camera.png"></li>
<li>3b1b&rsquo;s taylor series explaination:https://www.youtube.com/watch?v=3d6DsjIBzJ4</li>
<li>3b1b&rsquo;s explaination of why we have exponential e:https://www.youtube.com/watch?v=m2MIpDrF7Es</li>
<li>This website is all about competitive writing of source code that is as short as possible: <a href="https://codegolf.stackexchange.com/">Codewolf</a></li>
<li>Explaination of greedy algorithm: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-greedy">greedy algorithm</a></li>
<li>Explaination of dynamic programming: <a href="https://houbb.github.io/2020/01/23/data-struct-learn-07-base-dp#%E9%A2%98%E7%9B%AE">dynamic programming</a></li>
<li>Deploy perosonal VPN tools: <a href="https://tailscale.com/">tailscale</a></li>
</ol>
<h2 id="abstract">Abstract</h2>
<p>If no one is reading blogs anymore, why should we write them?
Let’s make it simple: you write a blog, but nobody cares, nobody reads it.
At least, the number of readers is not as many as you thought.
You put your personal ideas and thoughts into the article, carefully structuring each sentence, and choose a great image—then, no response, no likes, no shares, no activity.
So, what is the meaning of writing a blog?
First, there are two misconceptions about blogging.
One is that if I write a good article, readers will come naturally.
No, they won’t come. There are billions of blogs on the internet, like a massive hurricane, and yours is just a single leaf in the wind. Who would notice?
Another misconception is that if nobody reads it, writing is a waste of time.
Blogs have their own hidden value.
You write blogs not for the applause of others, but for your own needs.
Blogs help clear your mind. They help you organize your thoughts and sharpen your perspective.
When you think better, you will achieve better results.
The target audience of a blog is actually not the people on the internet, but your future self. Your article will help you see the evolution of your own thoughts.
Additionally, one day in the future, someone who truly needs your article will find it.
A deep, thoughtful article has a longer-lasting impact than a viral article.
Writing a blog is quite like street photography. You take your camera and walk through the city.
You see a scene—a moment filled with light, shadow, and humanity—and then you capture it.
Nobody cares about what you actually captured. But that’s not the reason you photograph; you photograph because you see something interesting.
Writing a blog is the same. You write a blog because you are thinking, observing new things, and hope to store them somewhere.
If someone reads it, that&rsquo;s great. If not, you’ve still completed your work</p>
]]></content:encoded>
    </item>
    <item>
      <title>Time Complexity Notations</title>
      <link>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the-difference-between-tn--on-and-%CE%B8n/</guid>
      <description>&lt;p&gt;In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O &lt;code&gt;O(n)&lt;/code&gt; notation before, but for Big theta &lt;code&gt;θ(n)&lt;/code&gt; and reccurence relations &lt;code&gt;T(n)&lt;/code&gt;, I never heard them before. Today, I hope I can finally figure them out.&lt;/p&gt;
&lt;h1 id=&#34;what&#34;&gt;What&lt;/h1&gt;
&lt;p&gt;T(n) represents the actual running time of an algorithm&lt;br&gt;
O(n) represents the asymptotic upper bound of the running time of an algorithm&lt;br&gt;
θ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In this semester, I listened the course mit 6.006 in youtube channel. Duirng the course, the professor used different notations to represents time complexity of an algorithm. I learned Big O <code>O(n)</code> notation before, but for Big theta <code>θ(n)</code> and reccurence relations <code>T(n)</code>, I never heard them before. Today, I hope I can finally figure them out.</p>
<h1 id="what">What</h1>
<p>T(n) represents the actual running time of an algorithm<br>
O(n) represents the asymptotic upper bound of the running time of an algorithm<br>
θ(n) represents the running time when asymptotic upper bound and lower bound of an algorithm ares the same.</p>
<h1 id="how-to-convert-the-three-of-them">How to convert the three of them</h1>
<ul>
<li>Normally we can directly transfer T(n) to O(n) or θ(n).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Int sum <span style="color:#f92672">=</span> 0
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">for</span> (i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> n, i <span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> sum <span style="color:#f92672">+</span> i
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a classical example,
First of all, we initialize variable <code>sum</code> requires one unit of running time. There are three statements inside the for loop, statement 1 <code>i = 1</code> requires one unit of the running time, statement 2 <code>i &lt;= n</code> requires n+1 units of the running time,
statement 3 <code>i ++</code> requires n units of the runningn time,
and <code>sum = sum + i</code> requires 2n units of the running time, n for addition and n for assignment. Therefore T(n) = 1+1+(n+1)+n+2n = 4n + 3.  In O(n), we ignore the constant and the lower-order terms, therefore the time complexity is O(n) / θ(n).</p>
<p>When the algorithm is a recursion, such as karatsuba multiplication and high precision multiplication.
<img alt="High Precision Multiplication and Karatsuba Multiplication example" loading="lazy" src="/Hand_write_note/IMG_2181.jpeg">
There are two methods to convert T(n) into O(n)</p>
<ol>
<li>Recursion tree method
<img alt="Recursion tree method" loading="lazy" src="/Hand_write_note/IMG_2183.jpeg"></li>
<li>According to Recursion tree method, we derive master theorem
<img alt="Master Theorem" loading="lazy" src="/Hand_write_note/IMG_2184.jpeg"></li>
</ol>
<p>The time complexity of multiplication is equal to the time complexity of division</p>
]]></content:encoded>
    </item>
    <item>
      <title>My Homelab</title>
      <link>http://localhost:1313/posts/homeserver/</link>
      <pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/homeserver/</guid>
      <description>&lt;p&gt;This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;The machine model is &lt;code&gt;HP-Elitedesk-800-G4-SFF&lt;/code&gt;. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/TechStuff/serverbill.png&#34;&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This week, I browsed many old machines at ebay to use for my first attempt at setting up a homelab. Initially, I planned to build a machine myself during the summer holiday, but in today I found a great performance and a high cost-effective machine that changed my mind.</p>
<h1 id="overview">Overview</h1>
<p>The machine model is <code>HP-Elitedesk-800-G4-SFF</code>. Compared to its previous generation, the chipset supports 8th and 9th generation of intel core cpu, which offers a significant improvement(6c6t) compare with 6th/7th core cpu(4c4t). Furthermore it provides NVme express in this generation. With these components, I can build a highly cost-effective homelab. The total cost is £150.<br>
<img loading="lazy" src="/TechStuff/serverbill.png"></p>
<blockquote>
<p>If you want to learn more here is the machine datasheet:<a href="/server_datasheet.pdf">server_datasheet</a></p></blockquote>
<h1 id="hardware">Hardware</h1>
<ul>
<li>Motherboard: Q370
<ul>
<li><a href="/server_motherboard.pdf">viewer</a></li>
</ul>
</li>
<li>CPU: i5-8500</li>
<li>GPU: intel UHD 630</li>
<li>RAM: 16G</li>
<li>SSD:  256G</li>
<li>HDD: 500G * 1</li>
</ul>
<p>The motherboard provides a high flexibility to expand more internal storage, also it has 4 PCie expansion slots which can used to expand more storage space or other components you want.</p>
<h1 id="software">Software</h1>
<p>nextcloud<br>
email domain<br>
gitlab<br>
minecraft server<br>
docker<br>
jellyin<br>
synthing<br>
proxy?router?gateway?<br>
virtual machine</p>
<p>I host my server with <strong>ubuntu server</strong> distro. The reason I didn&rsquo;t choose proxmox is because I want to learn server step by step,
proxmox is great in visualization, maybe in the future, I will try it.</p>
<p>Durign the process of configuring storage, I learned <strong>LVM</strong>, which is a wonderful tool for those users that has multiple drives. User can create a storage pool called volume group.
Firstly, user add their physical volumes into volumn group, and we create logical volumn based on the storage area had in volumn groups, and then we mount those LVs with the actural dirctory.
It seems like Windows is not able to achieve this function. For <strong>RAID</strong>, we seperate it into 4 different categories, radi0, raid1, raid5 and raid10. This tools shows how to save files in different number of drives or in LVM.</p>
<p>For external access, I plan to use cloudflare tunnel. They provide such service, I need to buy a domain name and combine it with the cloudflare tunnel, and when I access the server, I firstly type the domain name in my browser
to ask cloudflare, and they will guide me to the tunnel to my server, also in server end, I need to install cloudflared docker image as an end, then it works! It&rsquo;s so convenient for those people who live in school accommodation.
And it&rsquo;s totally free!</p>
<p>In my network configuration. I didn&rsquo;t install a router, but the best choice is to use a router for all devices in my home, and assign each of them an static IP address.
To access the server, I bought a portable monitor, since the IP address of my server using DHCP, which required to check the IP address manually when the machine
reboot or close. This issue will be solved easily when I have a router. Nowadays, I need to change the tunnels configuration to enable external access.</p>
<p>since I have 3 different operating systems in my three daily devices, phone for android, laptop for arachlinux and ipad for ipados, I installed nextcloud docker to try to integrate them into one ecosystem, that pretty awesome.</p>
<h1 id="update">Update</h1>
<ol>
<li>Nextcloud for cloud storage</li>
<li>Able to build game server</li>
<li>Music and video live streaming server.</li>
</ol>
<h1 id="future">Future</h1>
<ol>
<li>Mining bitcoin</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>JVM&#39;s Achievements and Limitations</title>
      <link>http://localhost:1313/posts/jvm/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jvm/</guid>
      <description>&lt;p&gt;This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn&amp;rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: &amp;ldquo;Write Once, Run Anywhere.&amp;rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let&amp;rsquo;s have a look about how JVM works.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This semester, I learned OOP from Inf1B, which using java as the official teaching language. What fascinates me the most is why Java has the JVM. I learned Python, C++, js and Haskell before, but all of them doesn&rsquo;t have a jargon for virtual machine. And then I went to wikipeidia to find out why.</p>
<blockquote>
<p>In 1995, Sun Microsystems introduced Java and the JVM to the world with an ambitious dream: &ldquo;Write Once, Run Anywhere.&rdquo; This WORA philosophy became a reality through the JVM, enabling Java applications to run on any operating system with a compatible JVM. Before talking about the archivements and limitations, Let&rsquo;s have a look about how JVM works.</p></blockquote>
<h2 id="how-the-jvm-works">How the JVM works</h2>
<p>The JVM executes er programs in several stages:</p>
<ol>
<li>
<p>Compilation: Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).</p>
</li>
<li>
<p>Class Loading: The JVM loads compiled bytecode when required.</p>
</li>
<li>
<p>Bytecode Verification: Ensures security and correctness before execution.</p>
</li>
<li>
<p>Execution: The JVM interprets or compiles bytecode using Just-In-Time (JIT) compilation.</p>
</li>
<li>
<p>Garbage Collection: The JVM automatically manages memory, reclaiming unused objects.</p>
</li>
</ol>
<h2 id="class-loader">Class loader</h2>
<p>One of the organizational units of JVM byte code is a class. A class loader implementation must be able to recognize and load anything that conforms to the Java class file format. Any implementation is free to recognize other binary forms besides class files, but it must recognize class files.</p>
<p>Let&rsquo;s explore this concept with an example:   <br>
Imagine you&rsquo;re watching a movie on a streaming service.</p>
<ul>
<li>Loading:<br>
The service first finds and imports the movie data you want to watch. Similarly, the class loader locates the binary data for a Java class.</li>
<li>Linking:
<ul>
<li>Verification: Before you watch the movie, the service checks that the file isn&rsquo;t corrupted. In Java, the class loader verifies the correctness of the class.</li>
<li>Preparation: The service sets up the necessary space in memory to buffer the movie. Java allocates memory for variables and sets default values.</li>
<li>Resolution: The service ensures all necessary subtitles or audio tracks are ready to play. Java resolves references to make them direct.</li>
</ul>
</li>
<li>Initialization:<br>
As you start watching, the service begins playing the movie. Similarly, Java runs code to set up variables with their starting values.</li>
</ul>
<p>Class Loader Types:</p>
<ul>
<li>Bootstrap Class Loader: Like the service&rsquo;s core library of well-known movies, it loads fundamental, trusted classes.</li>
<li>Extension Class Loader: Similar to special add-on features, it loads additional classes outside the core library.</li>
<li>System/Application Class Loader: Like searching for new releases or user-uploaded content, it loads classes specific to the application you’re using.</li>
</ul>
<h2 id="virtual-machine-architecture">Virtual machine architecture</h2>
<p><img loading="lazy" src="/TechStuff/JvmSpec7.png"></p>
<h2 id="cross-platform-compatibility-and-limitations">Cross-Platform Compatibility and Limitations</h2>
<p>The JVM abstracts away the underlying hardware and operating system specifics, allowing Java bytecode to run on any device equipped with a compatible JVM. This cross-platform capability greatly simplified software distribution and development, as developers could write code once and deploy it across various platforms without modification.</p>
<p>Despite its strong cross-platform capabilities, the JVM faced significant challenges due to competitive corporate strategies, particularly the &ldquo;Embrace, Extend, and Extinguish&rdquo; (EEE) approach adopted by some companies like Microsoft in the late 1990s. This strategy involved embracing a technology, extending it with proprietary features, and eventually using those extensions to undermine the original technology.</p>
<p>Microsoft initially embraced Java by integrating it into their Internet Explorer browser and Windows platforms. However, they extended Java with proprietary features that were specific to Windows, creating a version of Java that was incompatible with the standard JVM specifications set by Sun Microsystems. This move fragmented the Java platform and undermined the &ldquo;Write Once, Run Anywhere&rdquo; philosophy.</p>
<p>With the development and rise of programming languages like Swift, Kotlin, and JavaScript, the JVM faced significant challenges in maintaining its performance edge. Swift, designed by Apple for iOS and macOS platforms, offers high performance and safety due to its compiled nature and modern language features. Kotlin, although initially running on the JVM, introduced concise syntax and advanced features that surpassed Java in many ways, leading it to become the preferred language for Android development. JavaScript&rsquo;s performance greatly improved with engines like V8, and its versatility expanded through technologies like Node.js for server-side development. These languages not only matched but often exceeded the JVM&rsquo;s performance and adaptability in their respective domains, leading to a shift in developer preferences and a relative decline in the JVM&rsquo;s dominance.</p>
<h2 id="overall">Overall</h2>
<p>Nowadays, Java has become to a normal programming lauguage. And the question is obvious solved. Python has its own interpreter to transfer the source code into machine code. Haskell has its own compiler, C++/C are compiled directly into machine code. However,they can&rsquo;t generate a compiled file that enable to run in every operating system. If there is no EEE strategy, Linux may have a stronger effects in today&rsquo;s world.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
